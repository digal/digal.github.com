<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Лошоть и байты]]></title>
  <link href="http://digal.github.com/atom.xml" rel="self"/>
  <link href="http://digal.github.com/"/>
  <updated>2012-06-01T22:59:16+04:00</updated>
  <id>http://digal.github.com/</id>
  <author>
    <name><![CDATA[Yuri Buyanov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Линкопост номер 7, дачный.]]></title>
    <link href="http://digal.github.com/blog/2012/05/31/links-7/"/>
    <updated>2012-05-31T21:39:00+04:00</updated>
    <id>http://digal.github.com/blog/2012/05/31/links-7</id>
    <content type="html"><![CDATA[<p>Очередной выпуск с аж десятидневной задержкой, вызванной поездкой на дачу и, как обычно, кучей работы. В этом году дачный сезон скрашивается практически нормальным 3G от Мегафона и айфоновским хотспотом, так что поток ссылок не иссякает.</p>

<!--more-->


<p>Накопилось их просто адовое количество, сейчас попробуем всё разобрать и разложить по разделам.</p>

<h2>Языки программирования</h2>

<ul>
<li><p><a href="http://looplang.org/">Loop</a> — очередной же функциональный язык для JVM. Уже в который раз все scala-девелоперы вздыхают и спрашивают: &#8220;зачем&#8221;. <em>троллейбусизбуханки.jpg</em></p></li>
<li><p><a href="http://jsx.github.com/">JSX</a> — очередная замена для JS со статически типизированным ООП. Очень похоже на Яву. ОСТАНОВИТЕСЬ УЖЕ!!</p></li>
<li><p><a href="http://quasimal.com/posts/2012-05-21-funsh.html">fun.sh</a> — функциональное программирование в sh (точнее, zsh). Месье, как говорится, знает толк.</p></li>
</ul>


<h2>Просто вебдев</h2>

<ul>
<li><p>Чуваки <a href="http://www.raywenderlich.com/12139/introduction-to-cocoapods">собирают</a> деньги на открытие домена верхнего уровня <code>.js</code>, предназначенного, как понятно, для всяких жаваскриптовых сайтов. Правда, пока сбор денег остановлен из-за небольшой проблемы: двухбуквенные домены зарезервированы для стран и не продаются. Лол.</p></li>
<li><p>Очередная бесполезная JS-библиотека: <a href="http://www.smore.com/clippy-js">clippy.js</a>. <em>Любимый</em> персонаж из продуктов MS снова с вами, теперь на любом сайте.</p></li>
<li><p>Пара WYSIWYG-редакторов на JS: <a href="http://redactorjs.com/">Redactor</a> — небольшой, шустрый и фичастый, на jQuery. <a href="http://xing.github.com/wysihtml5/">WYSIHTML5</a> — тоже небольшой и симпатичный, без зависимостей, с прицелом на секьюрность и чистый HTML5-маркап на выходе.</p></li>
<li><p>Полезная и познавательная <a href="http://zero.milosz.ca/">таблица</a> результатов контринтуитивных операций в JS. JavaScript-девелоперам — распечатать и повесить на стенку, остальным можно просто поржать.</p></li>
</ul>


<h2>Мобильный веб</h2>

<ul>
<li><p><a href="https://github.com/eightmedia/hammer.js">hammer.js</a> — JS-библиотека для распознавания мультитач-жестов. Тоже пригодится, если вам приходится заниматься мобильным вебом.</p></li>
<li><p><a href="http://maxogden.com/fast-webview-applications">Хорошая статья</a>, описывающая всякие подводные камни мобильных веб-приложений (и, в частности, PhoneGap aka Cordova) и методы борьбы с ними. Очень стоит почитать и тем, кто уже использует Cordova, так и тем, кто ещё обдумывает такую возможность. Предложение про &#8220;painful world of static typing&#8221; смешное, да.</p></li>
</ul>


<h2>iOS</h2>

<ul>
<li><p><a href="http://www.mobileinc.co.uk/2012/05/the-art-of-the-ios-icon/">Набор</a> крутых iOS-иконок. Обязательно покажите своему дизайнеру.</p></li>
<li><p><a href="https://github.com/mpospese/MPFoldTransition">MPFoldTransition</a> — переходы свёртки/развёртки (fold) и переворачивания страницы для iOS5. Судя по ридми, библиотека много чего умеет, положу в копилочку.</p></li>
<li><p><a href="https://github.com/gotosleep/JASidePanels">JASidePanels</a> — UIViewController со сдвижными панельками по типу приложений Path и Facebook (как заявлено авторами). Ну, мало ли, тоже кому-то пригодится.</p></li>
<li><p><a href="https://github.com/BradLarson/GPUImage">GPUImage</a> — ещё одна библиотека (точнее, целый фреймворк) для обработки изображений с помощью OpenGL ES. В отличие от предыдущей, включает в себя очень солидный набор готовых фильтров.</p></li>
<li><p><a href="https://github.com/fphilipe/PHFDelegateChain">PHFDelegateChain</a> — библиотека для построения, как следует из называния, цепочек делегирования. Может быть полезной, например, для &#8220;размазывания&#8221; делегата по нескольким классам.</p></li>
<li><p><a href="https://github.com/sobri909/MGBox">MGBox</a> — фичастая и симпатичная замена UITableView. Присмотрюсь к ней обязательно, поскольку реализует ряд вещей, которые часто приходится писать заново, например, ресайз ячеек под размер текста.</p></li>
</ul>


<h2>Полезное</h2>

<ul>
<li><p>Для тех, кто интересуется геймдевом: <a href="http://devmag.org.za/2011/02/02/video-game-user-interface-design-diegesis-theory/">большая статья</a>, посвящённая созданию UI в играх.</p></li>
<li><p><a href="https://www.shortcutfoo.com/">Тренажёр</a> для заучивания шорткатов. Если кому-то не жаль времени на такое занятие.</p></li>
<li><p><a href="https://github.com/foursquare/fongo">Fongo</a> - in-memory реализация MongoDB (для Java). Очень не хватало такого для тестов, в то время как для SQL всегда была куча решений. Теперь вот есть.</p></li>
<li><p><a href="http://blog.ninlabs.com/2012/05/crowd-documentation/">Попытка</a> создания коллективной (чуть не добавил: &#8220;бессознательной&#8221;) документации из тредов на StackOverflow. Выглядит довольно интересно, и есть занимательная статистика.</p></li>
<li><p><a href="https://gist.github.com/2841832">Список</a> типовых задержек, которые должен знать каждый программер. От обращения к кэшу 1-го уровня (0.5 нс), до отправки пакета из Калифорнии в Нидерланды и обратно (150 мс). Тем, кого хотя бы изредка беспокоит производительность и быстродействие, стоит выучить наизусть.</p></li>
<li><p>Полезный <a href="http://whiletruecode.com/post/stop-hand-coding-start-zen-coding">плагин</a> для кучи редакторов, в том числе и для Sublime Text 2. Пригодится тем, кто пишет руками много ХТМЛя.</p></li>
</ul>


<h2>Всё остальное</h2>

<ul>
<li><p>Забавная подборка гифок с git-related зверушками: <a href="http://git-animals.tumblr.com/">git-animals</a>.</p></li>
<li><p>Интересное <a href="http://osvita.mediasapiens.ua/material/6746">интервью</a> с создателями самого интересного русскоязычного новостного твитора - <a href="http://twitter.com/lentaruofficial">@lentaruofficial</a>. Рецепт, как всегда, прост — делать for fun и для себя, а не осваивать выбитый на SMM бюджет.</p></li>
<li><p>Вице-президент SAP <a href="http://moskalyuk.name/4130">арестован</a> за мошенничество с наборами Lego. Переклеивал ярлыки в магазине и перепродавал на ебее. Волшебный мир ентерпрайза&#8230;</p></li>
<li><p>Нужно ли идти или бежать под дождём, чтобы меньше промокнуть? Математическое <a href="http://www.johndcook.com/blog/2012/05/23/walk-or-run-in-the-rain/">решение</a>.</p></li>
<li><p><a href="http://www.thegoodness.com/matt-and-asias-minecraft-wedding/">Свадьба</a> фанатов Minecraft. Много фоточек, пикселей и кубиков.</p></li>
<li><p><a href="http://mashable.com/2012/05/26/gadget-storage-trucks/">Интересный бизнес</a>, порождённый запретом на гаджеты в школах. Просто платная камера хранения в фургончике.</p></li>
<li><p>Очередное революционное <a href="http://www.leapmotion.com/">устройство ввода</a>, распознающее жесты в воздухе. Видео впечатляет, уже есть предзаказ.</p></li>
<li><p><a href="http://habrahabr.ru/post/144612/">Аналоговый CRT-фильтр</a> для фотографий в айфоне. Всё по-честному: изображение отправляется в Швецию, где показывается на старом телевизоре, с экрана которого делается фотография, которая отсылается обратно пользователю. Чотко и лампово.</p></li>
</ul>


<p>Уф, вроде всё. Надеюсь, следующий выпуск выйдет не с такой большой задержкой. Пока.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Линкопост номер 6]]></title>
    <link href="http://digal.github.com/blog/2012/05/21/links-6/"/>
    <updated>2012-05-21T21:50:00+04:00</updated>
    <id>http://digal.github.com/blog/2012/05/21/links-6</id>
    <content type="html"><![CDATA[<p>Привет.</p>

<p>Последние дни был очень занят подготовкой и проведением <a href="http://scaladev.ru/">ScalaDev</a>, так что ссылок накопилось просто неимоверное количество. Приступим, не мешкая.</p>

<!--more-->


<ul>
<li><p>Симпатичный анимированный <a href="http://www.google.com/green/storyofsend/desktop/">сайт</a> от гугла, наглядно рассказывающий о путешествии обычного электронного письма. Могут же, когда захотят.</p></li>
<li><p>Просто очень симпатичный <a href="http://pretty-rfc.herokuapp.com/">сайт</a> на базе <a href="http://twitter.github.com/bootstrap/">Bootstrap</a>, для удобного и приятного глазу чтения RFC.</p></li>
<li><p><a href="http://blog.evernote.com/2011/03/24/evernote%E2%80%99s-three-laws-of-data-protection/">Политика</a> Evernote по отношению к пользовательским данным в трёх простых правилах. Очень понятный и хороший подход. Надеюсь, другие сервисы эти правила тоже позаимствуют.</p></li>
<li><p><a href="http://slon.ru/ipad/7_elementov_sistemy_obrazovaniya_xxi_veka-786760.xhtml">Статья</a> Павла Дурова о настоящем и будущем образования. Где-то, может, он утрирует, но в целом, со многими вещами я соглашусь.</p></li>
<li><p>Очень боянистая ссылка, которая повторно всплыла в моей ленте, и которой я не могу не поделиться. <a href="https://github.com/mroth/lolcommits">Lolcommit</a>: небольшая программка, которая снимает вас на вебкамеру всякий раз, когда вы делаете git commit, дополняя фотографию коммит мессаджем.</p></li>
<li><p>Большая <a href="http://www.rockettheme.com/magazine/1319-using-sublime-text-2-for-development">статья</a> о том, чего можно накрутить на <a href="http://www.sublimetext.com/2">Sublime Text 2</a> для нужд разработчика. Всем, кто использует этот замечательный редактор — читать. Всем кто не использует — читать, устанавливать, и тоже использовать.</p></li>
<li><p>Веб-сервер nginx <a href="http://forum.nginx.org/read.php?29,226562">собирается</a> обзавестись поддержкой <a href="http://ru.wikipedia.org/wiki/SPDY">SPDY</a>. Ну, будем надеяться, что другие не отстанут.</p></li>
<li><p><a href="http://underscorejs.org/">Undescore.js</a>, библиотека для добавления массы удобных ФП-фишечек в JS, внезапно <a href="https://github.com/robb/Underscore.m">перенесена</a> на Obj-C. Выглядит немного непривычно, но попробовать стоит обязательно. К слову, оригинальную либу я использовал в работе над <a href="http://digal.github.com/nerdometer/">&#8220;нердометром&#8221;</a>, для того чтобы добавить в JS хотя бы немного привычной скаловской функциональщины.</p></li>
<li><p><a href="https://github.com/xissburg/XBImageFilters">XBImageFilters</a> ios-библиотека для создания фильтров изображений в реальном времени, например для обработки изображения с камеры айфона. Работает на OpenGL ES 2, фильтры задаются шейдерами на GLSL. Выглядит довольно впечатляюще.</p></li>
<li><p>Большой <a href="http://www.codinghorror.com/blog/2012/05/the-eternal-lorem-ipsum.html">пост</a> от Джеффа Атвуда, посвящённый Lorem Ipsum, c подробным введением в историю вопроса и очень большой подборкой ипсум-генераторов на любой вкус и цвет. Мой любимый — <a href="http://hipsteripsum.me/">Hipster Ipsum</a>.</p></li>
<li><p>Большой эммм&#8230; спор о роли Николы Теслы и Томаса Эдисона в истории. Начинается <a href="http://theoatmeal.com/comics/tesla">эпичным</a> комиксом на the Oatmeal, продолжается <a href="http://www.forbes.com/sites/alexknapp/2012/05/18/nikola-tesla-wasnt-god-and-thomas-edison-wasnt-the-devil/">статьёй</a> с возражениями в Forbes, и заканчивается (заканчивается ли?), и подробным <a href="http://theoatmeal.com/blog/tesla_response">разбором полётов</a> от того же the Oatmeal. Ждём продолжения.</p></li>
<li><p>GitHub <a href="https://github.com/blog/1127-github-for-windows">выпустил</a> клиента для Windows. Я пока не очень понял, насколько он хорошо выступает в качестве просто Git-клиента, но если это действительно так, то мои поздравления пользователям Windows.</p></li>
<li><p>Ещё одна <a href="http://worqshop.com/">IDE для айпада</a>, на этот раз с поддержкой Git и Heroku. То есть, практически, полноценный инструмент разработки на iOS.</p></li>
<li><p>И на последок — вещь, которой мне, слоупоку, не хватало те последние несколько лет, которые я активно работал со всякими REST-сервисами. <a href="https://chrome.google.com/webstore/detail/chklaanhfefbnpoihckbnefhakgolnmc">Хромовский экстеншен</a> для удобного просмотра JSON в браузере. Наверняка он не единственный, и вообще существует очень давно, но догадался я найти и использовать такую штуку только сейчас. Очень рекомендую, если вам, как и мне, часто приходится работать с JSON.</p></li>
</ul>


<p>На этом всё, увидимся через несколько дней. Пока.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Линкопост номер 5]]></title>
    <link href="http://digal.github.com/blog/2012/05/15/links-5/"/>
    <updated>2012-05-15T22:43:00+04:00</updated>
    <id>http://digal.github.com/blog/2012/05/15/links-5</id>
    <content type="html"><![CDATA[<p>Хотел написать этот пост ещё пару дней назад, но всё никак не успевал, так что некоторые ссылки могли потерять первозданный блеск и свежесть. Ну да не страшно, поехали!</p>

<!--more-->


<ul>
<li><p>Линус Торвальдс <a href="https://github.com/torvalds/linux/pull/17#issuecomment-5654674">не любит</a> гитхабовские пуллреквесты. Странно, а мне они нравятся.</p></li>
<li><p>Тема не нова, но тем не менее: неплохой <a href="http://www.revision-zero.org/orm-haters-do-get-it">пост</a> о несоместимости объектного и реляционного миров и о том, что ORM неэффективны по определению.</p></li>
<li><p>В догонку к ссылке из предыдущего поста: ещё один, гораздо более сложный <a href="http://wtpl.heroku.com/">тест</a> на знание языков программирования. И даже не надейтесь набрать сколько-нибудь высокий балл, если вы не отличаете K от J, SNUSP от BrainFuck и ACL от Common Lisp.</p></li>
<li><p>Интересная <a href="http://rogerstringer.com/2012/04/16/using-dropbox-as-a-git-repository">идея</a> использовать DropBox в качестве стораджа для GitHub-репозитория. Должно быть действительно довольно удобно для тех, кто работает на разных машинах, но пока не очень ясно чем может грозить.</p></li>
<li><p>Неплохое <a href="http://docs.python.org/release/3.1.5/howto/functional.html">введение</a> в функциональное программирование вообще и на Python в частности. Прямо в питоновской документации.</p></li>
<li><p>А вот авторы <a href="http://fsharpnews.blogspot.co.uk/2012/05/parallel-programming-in-functional.html">другой статьи</a> — предостерегают от использования &#8220;чисто&#8221; функциональных языков в параллельных (хотя по сути, скорее, в сколько-нибудь нагруженных) системах, взяв за пример Haskell и указывая на ряд нерешённых в таких языках проблем, прямо влияющих на производительность. В качестве альтернативы они предлагают использовать F# (ну или другие гибридные языки, например, Scala — добавлю я от себя.)</p></li>
<li><p><a href="http://kapeli.com/dash/">Dash</a> — Очень милая смотрелка документации для сocoa- и web- девелоперов. Также, позволяет довольно удобно хранить и использовать снипеты. <a href="http://itunes.apple.com/us/app/dash-docs-snippets/id458034879?mt=12">Лежит бесплатно</a> в Mac App store. В общем, поставил себе, и всем советую.</p></li>
<li><p>Несколько полезных контролов для iOS девелоперов: Во-первых: сетка <a href="https://github.com/kolinkrewinkel/KKGridView">KKGridView</a> с замахом на самую лучшую реализацию этого контрола, скорость и похожесть на UITableView. Во-вторых: похожий, но более специализированный <a href="https://github.com/ultragtx/GSBookShelf">GSBookShelf</a> — по сути, имплементация &#8220;книжных полок&#8221; из iBooks. И в-третьих — всплывающее меню с иконочками: <a href="https://github.com/mattgemmell/MGTileMenu">MGTileMenu</a>. Может пригодиться, например, в качестве панели инструментов в каком-нибудь редакторе чего-нибудь.</p></li>
<li><p>Немецкие фрилансеры <a href="http://www.deskmag.com/en/new-350-euro-monthly-freelancer-tax-will-kill-innovation-in-germany-378">напуганы</a> очередным налогом, который грозит поставить данный вид под угрозу вымирания. Платить от 650 евро в месяц ещё вообще ничего не заработав — это, действительно, не очень приятно.</p></li>
<li><p><a href="http://be5invis.github.com/moescript/">Moe</a> — очередная замена JavaScript, в этот раз базирующаяся на идеях Haskell и Python.</p></li>
<li><p>Тоже диалект JS, но совсем в другую сторону. <a href="http://mbebenita.github.com/LLJS/">LLJS</a> — низкоуровневый типизированный жаваскрипт с ручным управлением памятью. С malloc и free, всё как у больших. Ну я не знаю даже…</p></li>
</ul>


<p>На этом на сегодня всё, пишите фидбеки и присылайте ссылки. Пока.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Линкопост номер 4]]></title>
    <link href="http://digal.github.com/blog/2012/05/11/links-4/"/>
    <updated>2012-05-11T21:53:00+04:00</updated>
    <id>http://digal.github.com/blog/2012/05/11/links-4</id>
    <content type="html"><![CDATA[<p>Привет. Внезапно набежало очень много всего за пару дней, будем разбирать. Пока кладу всё в перемешку, но думаю уже ввести какие-то разделы внутри одного поста, либо разделить посты по тематике. Надо?</p>

<!--more-->


<ul>
<li><p>Небезызвестная контора Atlassian отличилась, просто эпически прое&#8230; эм&#8230; <a href="http://www.theregister.co.uk/2012/05/09/atlassian_cloud_storage_outage/">потеряв армейским способом</a> данные клиентов своего облачного сервиса. Клиентов вроде не очень много, но, насколько я понимаю, среди них есть довольно крупные. В общем, ещё одна грустная история о криворуких админах, не озаботившихся сохранностью данных.</p></li>
<li><p><a href="http://www.hanselman.com/blog/TheFloppyDiskMeansSaveAnd14OtherOldPeopleIconsThatDontMakeSenseAnymore.aspx">15 иконок</a>, изображающих предметы, вышедшие из обихода. А правда, интересно, как воспринимает, например, иконку дискеты тот, кто никогда её в глаза не видел?</p></li>
<li><p>Локальная <a href="https://github.com/jubos/fake-s3">замена</a> Amazon S3. По идее, должно быть очень полезно для тестирования сервисов, использующих оный сторадж, особенно учитывая, скажем, скорость S3 на аплоад файлов снаружи, да и вообще его платность.</p></li>
<li><p><a href="http://blog.greweb.fr/2012/05/illuminated-js-2d-lights-and-shadows-rendering-engine-for-html5-applications/">Библиотека</a> динамического 2D-освещения для JS. Предназачается, в основном, для игрушек, однако было бы занятно посмотреть, как это можно применить в каком-нибудь прикладном интерфейсе.</p></li>
<li><p>Хорошая <a href="http://gojko.net/2012/05/08/redefining-software-quality/">статья</a> о <a href="http://ru.wikipedia.org/wiki/%D0%9F%D0%B8%D1%80%D0%B0%D0%BC%D0%B8%D0%B4%D0%B0_%D0%BF%D0%BE%D1%82%D1%80%D0%B5%D0%B1%D0%BD%D0%BE%D1%81%D1%82%D0%B5%D0%B9_%D0%BF%D0%BE_%D0%9C%D0%B0%D1%81%D0%BB%D0%BE%D1%83">пирамиде потребностей Маслоу</a> (ну или скорее её аналоге) в разработке ПО. Хорошо раскладывает приоритеты по полочкам. Подумалось, что, к сожалению, в отличие от оригинальной пирамиды, в разработке ПО есть очень много людей и проектов, не осиливших даже первую ступеньку.</p></li>
<li><p>Очень красивая демосценерская <a href="http://www.creativeapplications.net/windows/hartverdrahtet-infinite-complexity-in-4096-bytes/">работа</a> всего в 4х килобайтах. Обязательно зацените.</p></li>
<li><p>Ещё в ту же тему: большая <a href="http://www.displayhack.org/2012/the-great-demoscene-sourcecode-giveaway/">подборка</a> демосценерских инструметов и исходников демок от разных групп, включая нашумевший <a href="https://github.com/farbrausch/fr_public">сет</a> от Farbrausch. Там есть, например, небезызвестный Kkrieger — шутер от первого лица в 96 килобайтах.</p></li>
<li><p>Apple, <a href="http://9to5mac.com/2012/05/11/ios-6-apple-drops-google-maps-debuts-in-house-maps-with-incredible-3d-mode/">похоже</a>, собирается отказаться в iOS6 от гуглокарт в пользу собственной разработки. На видео и скринах можно заметить довольно впечатляющий 3D-режим. Естественно, это пока неофициальная информация, однако судя <a href="http://news.cnet.com/8301-13579_3-20010523-37.html">по</a> <a href="http://9to5mac.com/2011/10/29/apple-acquired-mind-blowing-3d-mapping-company-c3-technologies-looking-to-take-ios-maps-to-the-next-level/">некоторым</a> <a href="http://9to5mac.com/2009/09/30/apple-buys-a-mapping-company-called-placebase/">приобретениям</a>, всё к тому и идёт.</p></li>
<li><p><a href="http://www.infoworld.com/d/application-development/hello-world-programming-languages-quiz-188874">Квиз</a> на угадывание языков программирования по реализации Hello World. Я набрал 19 из 20 — не узнал Logo.</p></li>
<li><p><a href="http://blog.mongodb.org/post/21923016898">Анализатор</a> схемы данных для MongoDB, как ни парадоксально это звучит. Поддерживает разные типы для одного и того же поля, ведёт статистику наличия этих самых полей в документах и всё такое прочее. Должно быть полезно как для ковыряния в легаси-базах, так и, возможно, для какого-то ограниченного датамайнинга в своих.</p></li>
<li><p>Если вдруг кому-то интересно такое странное извращение — <a href="http://habrahabr.ru/post/142447/#habracut">статья</a> на хабре, рассказывающая о том, как собрать JVM с выключенным GC. Ну, вдруг кому-то память, например, девать некуда.</p></li>
<li><p>Разработчик <a href="http://www.zeromq.org/">ØMQ</a> <a href="http://www.250bpm.com/blog:4">рассказывает</a> о том, почему для разработки был выбран C++, и о том, что следовало выбрать C. Должно быть интересно даже для тех, кто далёк и от первого, и от второго, и от третьего. И, кстати, если вы ещё не читали <a href="http://zguide.zeromq.org/page:all">гайд</a> по ØMQ — обязательно почитайте. По сути, это очень хорошо написанная книжка по messaging patterns и распределённым архитектурам.</p></li>
<li><p>В этот раз почему-то совсем не набралось ссылок, посвящённых разработке под iOS. Вот вам хотя бы <a href="http://markpospesel.wordpress.com/2012/05/10/anatomy-of-a-folding-animation/">одна</a> — с детальным разбором folding animation и пачкой полезных ссылок в подвале.</p></li>
</ul>


<p>Особую благодарность сегодня хочу выразить Сергею <a href="https://twitter.com/#!/novakche">@novakche</a> за пуллреквесты к бложеку с исправлениями опечаток и пунктуации. Всем пока и до следующего выпуска.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Линкопост номер 3]]></title>
    <link href="http://digal.github.com/blog/2012/05/09/weekend-links/"/>
    <updated>2012-05-09T22:12:00+04:00</updated>
    <id>http://digal.github.com/blog/2012/05/09/weekend-links</id>
    <content type="html"><![CDATA[<p>И снова привет. Вопреки моим ожиданиям, в &#8220;избранное&#8221; твиттера за праздники набежало довольно-таки много всего, попробую накопать из этой кучи чего-нибудь интересное для сегодняшней подборки.</p>

<!--more-->


<ul>
<li><p>Компания Dell <a href="http://bartongeorge.net/2012/05/07/introducing-project-sputnik-developer-laptop/">готовится</a> выпустить Sputnik — ноутбук с Убунтой на борту, предназначенный специально разработчиков. Помимо железа (которое не сильно отличается от Dell XPS13) предполагается некая система управления разработческим софтом, однако, чем оно лучше MBP с обычным пакетным менеджером, я пока не очень понимаю.</p></li>
<li><p>GitHub опять порадовал, <a href="https://github.com/blog/1125-new-git-homepage">сделав</a> новую домашнюю страничку для <a href="http://git-scm.com/">Git</a>. Мне нравится.</p></li>
<li><p>Twitter не отстал, <a href="http://thechangelog.com/post/22607432623/twitter-text-objc-an-objective-c-implementation-of-twitt">выпустив</a> ObjC-<a href="https://github.com/twitter/twitter-text-objc">библиотеку</a> для обработки текста. Ну, правда, обработки не абы какой, а вполне понятной: вычленения #хештегов, @упоминаний, ссылок и подсчёта количества символов в тексте. Впрочем, должно оказаться полезным для тех, кому нужна какая-то функциональность твиттер-клиента. Также в природе существуют версии для <a href="https://github.com/twitter/twitter-text-rb">Ruby</a>, <a href="https://github.com/twitter/twitter-text-java">Java</a> и <a href="https://github.com/twitter/twitter-text-js">JavaScript</a>.</p></li>
<li><p>В репозиторий вебкита прилетел <a href="http://trac.webkit.org/changeset/116384">коммит</a>, добавляющий в движок функциональность <a href="http://webintents.org/">веб-интентов</a>. Для тех, кто занимался разработкой для Android: да, это те же самые Intents, только для веба. Для остальных, могу только пояснить что это способ, предназначенный для организации взаимодействия между совершенно незнакомыми веб-приложениями через некий стандартный механизм. Ну, то есть, например, имея картинку в каком-нибудь одном веб-приложении, пользователь может отредактировать её в другом, а затем расшарить с помощью третьего. Немного сумбурно объясняю, но, поверьте мне, это довольно круто. По крайней мере, именно механизма интентов мне не хватает больше всего в iOS как бывшему пользователю Android.</p></li>
<li><p><a href="http://blog.prettylittlestatemachine.com/blog/2011/07/05/hello-world-candy-5-fues-for-developers-to-love/">Подборка</a> пяти проектов, дающих разработчику самый лучший с точки зрения автора поста FUE — First User Experience. Также предлагается интересная метрика сложности инструментов разработки (или скорее качества Developer Experience) — TTFHW (Time To First Hello World). Вообще, тема <a href="http://developerexperience.org/">Developer Experience</a> очень интересная, положу её, пожалуй, тоже в стопочку &#8220;когда-нибудь написать большой пост&#8221;.</p></li>
<li><p>Просто очень милый <a href="http://zmoazeni.github.com/gitspective/">таймлайн</a> пользователя на Гитхабе. Пишут, что в стиле Фейсбука, хотя я фейсбучный таймлайн так и не заценил. Придётся поверить на слово.</p></li>
<li><p><a href="http://html9responsiveboilerstrapjs.com/">HTML9 Responsive Boilerstrap JS</a> — мне кажется, кто-то должен сделать из этого генератор текстов-заглушек по типу <a href="http://hipsteripsum.me/">Hipster Ipsum</a>.</p></li>
<li><p>HTML5-<a href="http://wolfenstein.bethsoft.com/">версия</a> Wolfenstein 3D, в честь 20-летия (всего-то?) выхода оригинала.</p></li>
</ul>


<p>Вот, пожалуй, и всё. Увидимся.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Линкоблог: iOS-выпуск]]></title>
    <link href="http://digal.github.com/blog/2012/05/04/other-links/"/>
    <updated>2012-05-04T22:22:00+04:00</updated>
    <id>http://digal.github.com/blog/2012/05/04/other-links</id>
    <content type="html"><![CDATA[<p>Оказалось, что если аккуратно складывать найденные интересные ссылки в файлик, то за день их легко набирается на нормальную подборку. Не такую как у некоторых, но всё же. Осталось только понять, где взять время на написание собственно поста.</p>

<p>Как-то так получилось, что сегодняшняя подборка посвящена в основном iOS и смежным темам. Впрочем, это наверное будет скорее правилом, нежели исключением, по крайней мере в ближайшее время.</p>

<!--more-->


<p>Впрочем, начнём мы с более общих тем:</p>

<ul>
<li><p>Две занимательные статьи о вреде процесса. <a href="http://www.codinghorror.com/blog/2008/03/is-eeyore-designing-your-software.html">Одна</a> — интересное сравнение роли процесса в открытых и коммерческих проектах от Джеффа Атвуда. <a href="http://teddziuba.com/2011/12/process.html">Вторая</a> — более радикальное предложение искоренить процесс как таковой от знатного тролля Теда Дзюбы.</p></li>
<li><p>Журналист Russell Brandom наткнулся на фейсбук шестилетней давности, да не где-нибудь, а в России. Очень занятная <a href="http://www.buzzfeed.com/h2/pulse/tommywilhelm/where-the-old-facebook-still-lives">статья</a> про ВКонтакте глазами американского журналиста-хипстора.</p></li>
<li><p>Наделавший вчера и сегодня много базза Ruby-тулчейн для iOS-разработки: <a href="http://www.rubymotion.com/">RubyMotion</a>. Сделан на Rake, поддержка TestFlight и CocoaPods из коробки и вообще всё очень вкусно на вид. Разработано, кстати, не абы кем, а автором MacRuby, ушедшим из Apple. Хороший перебор всех косточек и сравнения с ObjC (не в пользу последнего) — <a href="http://joshsymonds.com/blog/2012/05/04/why-rubymotion-is-better-than-objective-c/">вот тут</a>. А вообще, мне кажется, что Apple должна купить этот проект и придать ему официальный статус. Посмотрим, что будет.</p></li>
<li><p>GitHub выпустил <a href="https://github.com/github/ReactiveCocoa">ReactiveCocoa</a> — фреймворк для составления асинхронных операций над последовательностями значений. Звучит страшновато (трудности перевода?), но <a href="https://github.com/blog/1107-reactivecocoa-for-a-better-world">на деле</a> — очень круто и интересно. По сути, это реализация дотнетовских Reactive Extensions для ObjC, если это кому-то о чём-то говорит.</p></li>
<li><p>Zynga <a href="http://adage.com/article/digital/zynga-s-ad-pitch-draw-draw-brand/234515/">придумала</a> монетизировать игры не только с помощью прямых продаж и тупой рекламы, а встраивая эту самую рекламу в игровой контент. Речь идёт о популярной игре Draw Something, от купленной Zynga компании OMGPop, где игрокам теперь, помимо всего прочего, предложат рисовать и угадывать известные бренды. Небесплатно для этих самых брендов, конечно.</p></li>
<li><p>Apple устроил небольшую <a href="http://forums.dropbox.com/topic.php?id=59350&amp;replies=15">драму</a>, не пропустив в AppStore приложение, использующее DropBox SDK. Всё дело в том, что на страничке авторизации пользователя, имелась ссылка на полный сайт, где ушлые пользователи могли заказать себе немного дополнительного места в дропбоксе, не откатив Эпплу положенных 30%. Надо отдать должное разработчикам SDK — они довольно оперативно выпустили апдейт, убирающий опасную ссылку.</p></li>
<li><p>Ну и напоследок — игра для iPad под названием <a href="http://twolivesleft.com/CargoBot/">Cargo Bot</a>. Примечательна двумя вещами. Во-первых, в игре нужно программировать роботов (грузящих ящики), а во-вторых, как утверждается, она целиком разработана на iPad с использованием IDE под названием <a href="http://twolivesleft.com/Codea/">Codea</a>.</p></li>
</ul>


<p>Пожалуй, на сегодня хватит. Следующий выпуск — как только так сразу. Пока.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Links]]></title>
    <link href="http://digal.github.com/blog/2012/05/03/links/"/>
    <updated>2012-05-03T12:43:00+04:00</updated>
    <id>http://digal.github.com/blog/2012/05/03/links</id>
    <content type="html"><![CDATA[<p>Итак, обещанные ссылки. Сразу предупреждаю, что практически всё - не такое уж и новое, но тем кто не видел — определённо стоит посмотреть.</p>

<!--more-->


<ul>
<li><p><a href="http://swagger.wordnik.com/">Swagger</a> — система документирования REST API, генерирующая красивые доки из аннотаций в коде. Сама спецификация не привязана ни к какому языку, но текущая реализация поддерживает только Scala, Java и вроде как node.js. Аннотировать придётся довольно много, но мне кажется, что <a href="http://petstore.swagger.wordnik.com/">такая</a> дока с возможностью делать API-запросы прямо из неё, того стоит. Генератор клиентских библиотек для Java, Scala, JS, AS3, PHP и Python <a href="https://github.com/wordnik/swagger-codegen">прилагается</a> (поддержку Android и Ruby обещают тоже сделать).</p></li>
<li><p><a href="https://github.com/n8han/giter8">giter8</a> - тулза для установки шаблонов scala-проектов. <a href="https://github.com/n8han/giter8/wiki/giter8-templates">Список</a> шаблонов пока небольшой, но, думаю, будет пополняться. Наткнулся на него просто потому что странички некоторых фреймворков предлагают giter8 как способ быстро поставить sample project и поиграться с ним.</p></li>
<li><p><a href="http://parsekit.com/">ParseKit</a> - фичастая либа (или даже фреймворк) для продвинутой токенизации строк и написания парсеров (в том числе на BNF-грамматиках). Как раз сейчас я пытаюсь сделать на ней реализацию простенького ассемблера. Ссылка на сорцы ведёт на устаревший репозиторий на googlecode, есть ещё один на GH (тоже устаревший), и, похоже-таки актуальная версия - тоже на гуглокоде <a href="http://code.google.com/p/parsekit/">вот тут</a>. Для тех, кто использует CocoaPods - есть podspec от вашего покорного слуги в официальном репозитории. О CocoaPods, кстати, тоже хочется рассказать поподробнее в отдельном посте.</p></li>
<li><p><a href="http://www.bogost.com/games/a_television_simulator.shtml">Интересная заметка</a> с детальным разбором эффектов старых CRT-мониторов, или даже скорее телевизоров. Пригодится вам, если вы вдруг захотите воспроизвести экспириенс (мне кажется, русское слово &#8220;опыт&#8221; тут не очень походит) игр 80-х, или, например, написать собственную вариацию на тему <a href="http://www.secretgeometry.com/apps/cathode/">Cathode</a>.</p></li>
<li><p><a href="http://textozor.com/zalgo-text/">Генератор</a> Unicode-мусора в текстах, поз́вол͢я̨е͘т пр̡и͢д̨ат͝ь̴ ̕ва҉ш͞ѐм̴у̛ соо҉б҉ще̶н̀ию̷ лёг̨к͡и̛й г̷раду͏с бе͠з̢у̀м̵ия̀. При умелом <a href="http://stackoverflow.com/a/1732454/270535">использовании</a> — очень впечатляет, только не переборщите.</p></li>
<li><p>В Питере <a href="http://www.restoclub.ru/articles/14666/">открывается</a> кафе-коворкинг-миниотель. Час работы (включая горячие напитки, снеки и зеркало для луков) обойдётся в 99 рублей и позволит получить скидку на обед. Интересный вариант на те самые дни, когда в офисе работать не хочется, а дома не получается. Надо будет попробовать.</p></li>
<li><p>На десерт: <a href="http://runningastartup.tumblr.com/">Running Startup</a> — по-моему, лучший блог о стартапах евар! Осторожно, трафик.</p></li>
</ul>


<p>Вот, наверное, и всё на этот раз. Следующая порция — как наберётся достаточно ссылок. Пока, и пишите фидбеки.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Апдейт]]></title>
    <link href="http://digal.github.com/blog/2012/05/03/update/"/>
    <updated>2012-05-03T12:08:00+04:00</updated>
    <id>http://digal.github.com/blog/2012/05/03/update</id>
    <content type="html"><![CDATA[<p>И снова здравствуйте.</p>

<p>Поскольку времени на написание развёрнутых постов &#8220;на тему&#8221; категорически не хватает, мне пришла в голову мысль решить одним махом сразу две проблемы: оживить бложек и начать складывать куда-то все ссылки, которые лежат мёртвым грузом в &#8220;избранном&#8221; твиттера, инстапапере, гуглоридере и даже в закладках браузера. То есть, попросту говоря, организовать небольшой линкоблог по типу Бобуковского <a href="http://addmeto.cc/">addmeto.cc</a>, на который если кто-то ещё не подписался, то очень зря. Сегодня вечером попробую выложить то что собралось за вчера/сегодня отдельным постом, ну и дальше буду выкладывать по мере накопления.</p>

<p>На самом деле, тем на один-два поста у меня уже накопилось, в частности про то, как у нас выстроился процесс разработки в мобильном отделе (да, я всё ещё пишу под айфончики), на какие грабли было наступлено и какие вещи ещё только планируется сделать.</p>

<p>Также, не могу не упомянуть про одну из причин нехватки времени: отличные онлайн-курсы от <a href="https://www.coursera.org/">Coursera</a>. Вот буквально неделю назад я сдал финальный экзамен по <a href="https://www.coursera.org/course/algo">Design and Analysis of Algorithms I</a> от Стэнфорда, не удержался и начал десятинедельный <a href="https://www.coursera.org/course/compilers">Compilers</a> от него же, хотя пока не уверен, что буду успевать всё делать.</p>

<p>Ну и на последок, прорекламирую очередной <a href="http://elegion.timepad.ru/event/manage/21310">ScalaSPB</a>, который пройдёт 19 Мая. Приходите, пообщаемся.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2011/2012]]></title>
    <link href="http://digal.github.com/blog/2012/01/04/2011-2012/"/>
    <updated>2012-01-04T22:33:00+04:00</updated>
    <id>http://digal.github.com/blog/2012/01/04/2011-2012</id>
    <content type="html"><![CDATA[<p>Наконец дозрел до стандартного поста в виде небольшого подбивания (профессиональных) итогов года и построения планов на следующий. Год назад я приблизительно сформулировал в голове вещи, которые мне бы хотелось сделать в 2011-м, и, оглядываясь назад, можно с хорошей долей уверенности сказать что бОльшая часть вещей так или иначе выполнена.</p>

<!--more-->


<h2>Scala</h2>

<p>Язык, с которым я познакомился летом/осенью 2010-го и который успешно был внедрён в разработку больших и взрослых проектов в <a href="http://e-legion.ru">e-Legion</a>. Помимо бэкенда <a href="http://goozy.com">Goozy</a> мы практически закончили ещё один заказной проект на <a href="http://www.tornadoweb.org/">Tornado</a>+Scala+<a href="http://www.zeromq.org/">ØMQ</a>. Наверное больше половины всего кода было написано именно на нём. И хотя Scala-проекты составляют совсем небольшую долю относительно всего остального в компании, я очень надеюсь что мы продолжим использовать этот замечательный язык.</p>

<p>Кроме того, удалось инициировать и принять самое непосредственное участие в организации евента, посвящённого Scala. И хотя мной было наступлено на неимоверное количество граблей, по-моему почти всем понравилось, а я получил просто огромное количество опыта, касающегося организации айтишных встреч. Всем кто пришёл ещё раз огромное большое спасибо, мы обязательно всё повторим где-нибудь в середине весны. Официальные объявления будут чуть попозже.</p>

<p>В общем, в 2012 я очень надеюсь вернуться к работе со Scala, поскольку этот язык вызывает просто массу положительных эмоций при работе с ним.</p>

<h2>Вебдев</h2>

<p>У меня есть немного странное убеждение в том, что существует некий базовый набор прикладных навыков, которыми должен обладать любой программист. Один из них &#8211; владение скриптовыми языками и умение быстро сваять несложное веб-приложение или сайт. И хотя на Java/Scala сделать это вполне возможно, мне очень хотелось освоить что-нибудь более легковесное. Был сделан небольшой подход к node.js и coffeescript, не окончившийся однако (пока) ничем, а вот попытка освоить Ruby on Rails вполне себе удалась. Этому способствовали две вещи. Во-первых, очень неплохой <a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book">туториал</a>, аккуратно покрывающий кучу аспектов правильной веб-разработки на рельсах, включая основы языка, самого фреймворка, хостинг на <a href="http://www.heroku.com/">Heroku</a>, использование мокапов UI и написание тестов. Во вторых, отличная мотивация в виде взятого и делаемого ночами фриланс-проекта. И хотя я успел сто раз пожалеть о заниженной цене, основная цель &#8211; освоить Rails &#8211; была достигнута. Хотя конечно, и фреймворк, и особенно Ruby я копнул достаточно поверхностно, и зваться полноценным руби-девелопером мне пока рано.</p>

<p>Кроме того, мне удалось основательно поиграться с JavaScript и несколькими отличными библиотеками для него в рамках &#8221;<a href="http://digal.github.com/nerdometer/">Нердометра</a>&#8221;. Сам нердометр, кстати, тоже подарил мне замечательный опыт разработки законченного пет-проджекта вообще, и целиком клиентсайдного single page app в частности. Он очень мне нравится, и я надеюсь написать в будущем ещё что-нибудь такое же. Кстати, большое спасибо Диме Медвинскому, за патчи и вообще поддержку.</p>

<h2>Опенсорц</h2>

<p>К сожалению, мне не удалось основательно поучаствовать в работе opensource-сообщества путём написания патчей и багрепортов (один небольшой фикс в zepto.js не в счёт), однако практически всё что я делал для себя и небольшая часть вещей, сделанных по работе, были выложены на гитхаб. Помимо упомянутого ранее нердометра это:</p>

<ul>
<li>начатый (я всё ещё лелею надежду допилить его до приличного состояния) <a href="https://github.com/digal/st2-octopress">octopress-плагин для sublime text 2</a></li>
<li><a href="https://github.com/elegion/jdbc-mongo-migrator">тулза</a> для миграции данных из SQL-баз в MongoDB</li>
<li><a href="https://github.com/elegion/Ostrich-dashboard">дашборд</a> для мониторинга сервисов с помощью Ostrich</li>
<li>простенькая <a href="https://github.com/elegion/Scala-ZMQ-RPC">реализация</a> RPC через ØMQ на Scala</li>
<li>плюс пара легаси-проектов, валявшихся на диске (<a href="https://github.com/digal/vosyana">Восяня</a> и <a href="https://github.com/digal/ptrl">Plutonium Roguelike</a>).</li>
</ul>


<p>Ощущения от выкладывание всего этого добра сорцами наружу &#8211; совершенно драйвовые, очень мотивируют писать по возможности красивый код, думать о потенциальных пользователях и вообще что-то делать.</p>

<h2>Мобильная разработка</h2>

<p>Примерно так же внезапно и быстро, как в случае с Rails, я окунулся в работу с iOS. Совершенно новый язык, платформа, инструменты и практики разработки. У меня до сих пор идёт кругом голова (что наверное заметно по двум предыдущим постам), так что в этом посте я воздержусь от развёрнутого описания впечатлений. Скажу только что пока почти половину времени, посвящённого мобайл-деву, у меня занимает приделывание к iOS-проектам правильных практик разработки: Continuous Integration/Deployment с помощью <a href="http://jenkins-ci.org/">Jenkins</a> и <a href="https://testflightapp.com/">TestFlight</a>, поиск правильных решений для xUnit/xSpec-тестирования, управления зависимостями и всё такое прочее. Похоже, что в ближайшие полгода мобильная разработка будет основным моим занятием.</p>

<h2>Процесс</h2>

<p>Goozy стал первым проектом, на которых я впервые успешно опробовал и внедрил ряд правильных практик разработки: полное покрытие тестами всего что только можно, CI/D, активное использование веток Git сначала как замены SVN, а потом как основы процесса (хорошее введение в эту тему есть <a href="http://nvie.com/posts/a-successful-git-branching-model/">в этой статье</a>). В этом же проекте мы серьёзно задействовали облака (Amazon EC2) и вплотную подошли к <a href="http://dev2ops.org/blog/2010/2/22/what-is-devops.html">DevOps</a> и автоматическому управлению инфраструктурой с помощью <a href="http://www.opscode.com/chef/">Chef</a>. Результаты настолько впечатлили, что теперь я (с переменным успехом) пытаюсь внедрить это всё на уровне компании (чем, собственно, и занимаюсь в данный момент в мобайл-тиме).</p>

<h2>Блог</h2>

<p>После ряда безуспешных попыток писать посты на айтишную тематику то на blogspot, то на posterous, то ещё чёрт знает где, я наконец нашёл священный грааль в виде связки gh-pages+<a href="http://octopress.org/">Octopress</a>. Единственное что пока тяготит &#8211; стандартная тема оформления, но я надеюсь что когда-нибудь руки дойдут и до этого. Результат перед вами: за четыре месяца было написано с десяток разного размера и качества постов, в следующем году, я надеюсь, будет больше, хотя о подвиге Петра Диденко, <a href="http://www.kip.ru/realtime/2011/12/365th.html">выдающего</a> по посту в день, мне пока страшно даже подумать.</p>

<h2>Книги</h2>

<p>Основное время для чтения книг у меня &#8211; лето с частыми и длинными поездками в электричке на дачу. К сожалению, даже не припомню в этом году ни одной прочитанной до конца книги (кроме коротенькой Rework), и, думаю, это характеризует меня не лучшей стороны. Впрочем, даже те что были прочитаны до середины очень помогли и порадовали. В их числе были <a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">SICP</a> и <a href="http://shop.oreilly.com/product/0636920010258.do">Programming iOS 4</a>. На первую у меня есть определённые планы, вторую же я навряд ли когда-нибудь дочитаю до конца, поскольку вся её вторая половина хорошо заменяется референсами и туториалами по разным компонентам Cocoa Touch.</p>

<h2>Планы</h2>

<p>В общем и целом, мне кажется, год выдался в профессиональном плане довольно удачным. Самая большая претензия (и история с книжками её хорошо иллюстрирует) &#8211; довольно большая часть освоенных вещей освоена пока довольно поверхностно. В прочем, уже не раз было подмечено, что чем больше человек осваивает какую-то область знаний, тем более безграничной она ему кажется. Так что эта поверхностность &#8211; ни в коем случае не повод комплексовать и стыдиться, а скорее намёк не сбавлять темп и улучшать качество самообучения.</p>

<p>В 2012 у меня намечается ряд довольно крупных и заметных событий в личной жизни, так что я заранее готовлю себя к тому что будет необходимость отложить часть своих профессиональных планов на какое-то время. Но тем не менее, вот довольно нечёткий список того, чего хотелось бы сделать:</p>

<ul>
<li>Основательно углубить знания того, что освоил в 2011: Scala (очень хочется освоить фреймворк Akka), iOS, процессы разработки, TDD/BDD, Python или Ruby, современный вебдев.</li>
<li>Сделать евенты ScalaSPb регулярными (пока я целюсь на два раза в год).</li>
<li>Теоретическая подготовка: записался на Стэнфордские классы по Machine Learning и Natural Language Processing, очень надеюсь что будет время делать всё вовремя. Также, думаю над тем, чтобы начать SICP заново, в этот раз обстоятельно, с расписанием и выполнением упражнений.</li>
<li>Выучить новый язык программирования. Пока не решил какой, скорее всего что-то функциональное. Возможно Scheme (что хорошо сочетается с планами по SICP) или Clojure. Может быть, пощупаю Erlang.</li>
<li>Повысить уровень владения UNIX-тулзами, может освоить наконец-то vim.</li>
<li>Сделать небольшой pet project для iOS.</li>
<li>Может быть, где-нибудь под конец года, поковырять эмбед, начав, например, c <a href="http://www.arduino.cc/">arduino</a></li>
</ul>


<p>Если у кого-то есть похожий пост с итогами года и планами на следующий, кидайте ссылки в комментарии (ну или просто кратенько списком, если лень писать пост). Кстати, хорошая подборка вещей, которые можно пообещать себе сделать в следующем году есть в <a href="http://matt.might.net/articles/programmers-resolutions/">этом посте</a>. И да, чуть не забыл: С Новым Годом!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS-dev: первые впечатления. Всё остальное.]]></title>
    <link href="http://digal.github.com/blog/2011/11/30/ios-impressions-2/"/>
    <updated>2011-11-30T17:44:00+04:00</updated>
    <id>http://digal.github.com/blog/2011/11/30/ios-impressions-2</id>
    <content type="html"><![CDATA[<p>Итак, продолжаю описывать уже немного утрясшиеся впечатления от iOS-разработки. Если кто-то пропустил, то <a href="http://digal.github.com/blog/2011/11/22/ios-impressions/">вот первый пост</a>. Теперь немного расскажу об инструментах и экостистеме. Сразу оговорюсь, что поскольку &#8220;настоящим сварщиком&#8221; мне называться пока рано, я могу быть не в курсе источников и реальных причин каких-то недочётов. Например, я наверняка буду приписывать отдельным инструментам недостатки, происходящие от других элементов тулчейна или даже просто из сложившихся здесь традиций.</p>

<!--more-->


<h2>IDE</h2>

<p>Самый главный инструмент iOS-девелопера - это, конечно же, XCode. Этот инструмент вызывает смешанные чувства. С одной стороны, если сравнить его с таким монстром (в хорошем смысле) как IntelliJ IDEA, то чувствуется недостаток всяких приятных и ускоряющих работу неопытного девелопера фич (например, я не нашёл, как сгенерировать заготовки недостающих методов протокола). Естественно, и вполне в стиле Apple, нет никакого репозитория плагинов. Не обходится, к сожалению, без крэшей и странных багов. Диалог коммита в git, например, крэшит программу практически через раз, а в одном случае мне пришлось даже перезапустить систему, чтобы то ли XCode, то ли симулятор пришли в себя.</p>

<p>Довольно много сумятицы вносит, как XCode работает с файлами проекта: его структура и местоположение файлов на диске имеют друг с другом мало чего общего. Папки в навигаторе являются чисто &#8220;виртуальными&#8221; и при добавлении файлов в проект откуда-то ещё (например, из какой-нибудь опенсорсной библиотеки) в лучшем случае вы получите кашу из файлов в папке с проектом. В худшем - если забыть поставить галочку при добавлении - файл проекта просто сошлётся на них, а сами файлы останутся лежать где лежали, и, конечно, не попадут в VCS, и выяснится это, только когда проект откроют на другой машине. Я уже не говорю о том, что один и тот же файл можно добавить два раза, что ломает билд. Конечно, ко всему этому можно привыкнуть и делать всё аккуратно, но поначалу это вызывает путаницу.</p>

<p>С другой стороны, сделана эта IDE очень приятно, и, положа руку на сердце, можно сказать, всё действительно нужное для разработки под iOS и OSX там есть. Есть куча готовых шаблонов для приложений, поддержка svn и git (с учётом упомянутых выше проблем со стабильностью), средства юнит-тестирования и ряд основных рефакторингов. Дизайнер интерфейсов очень неплох (после ада андроидовских XML-ек с лейаутами), многие вещи делаются перетаскиванием стрелочек из одной области окна в другую. А уж после того как я увидел визуализацию найденных <a href="http://clang-analyzer.llvm.org/">static analyzer</a>-ом утечек памяти, я практически влюбился в этот инструмент.</p>

<p><img src="https://img.skitch.com/20111130-qknwak3rexswj8jk8snrjf4fh7.png"></p>

<p>Впрочем, отталкиваясь от опыта работы с IDEA, RubyMine и WebStorm, очень хотелось бы взглянуть на альтернативу от <a href="http://www.jetbrains.com/">JetBrains</a>: <a href="http://www.jetbrains.com/objc/">AppCode</a>. Если будет время - обязательно попробую и опишу впечатления.</p>

<h2>Пляски с криптографией</h2>

<p>Если кто-то вам скажет, что самая сложная и запутанная часть в программировании для iOS - синтаксис Objective-C, или управление памятью, плюньте этому человеку в лицо. Лично у меня самое большое количество негатива вызвала запутанная возня с сертификатами. Даже если вы работаете в компании с девелоперским аккаунтом (то есть половина бюрократии уже сделана за вас), то для разработки (не распространения) одного приложения вам будет необходимо:</p>

<ul>
<li>создать certificate signing request</li>
<li>с помощью него создать сертификат и положить его в кейчейн</li>
<li>создать app ID</li>
<li>создать provisioning profile для девайса (для симулятора не нужно, и на том спасибо)</li>
<li>создать provisioning profile для приложения и добавить туда себя и свой девайс. Впрочем тут можно срезать углы, поскольку при указании bundle id можно использовать wildcard. С другой стороны, при добавлении сюда ещё одного разработчика или девайса, необходимо перегенерировать и импортировать его в систему заново.</li>
</ul>


<p>Если представить себе что все эти артефакты имеют неприятное свойство &#8220;протухать&#8221; (то есть, имеют конечный срок действия), требуют для использования приватных ключей, которые лежат на машинах где был сделан signing request (а если ключа нет - то надо перегенерировать сертификат), умножить всё это на количество разработчиков в команде, а потом ещё раз на количество разрабатываемых приложений, то можно представить сколько нервов, времени и мата занимает вся эта возня. Я уже не говорю про то, на сколько граблей было наступлено при настройки headless сборки-проектов на билд-сервере. Codesign то в упор не видел кейчейна, то зачем-то требовал user interaction в виде окошечка подтверждения доступа к этому самому кейчейну. Впрочем, как и с другими &#8220;острыми углами&#8221;, наступив с десяток граблей и наведя порядок в управлении сертификатами, ключами и профайлами, к этому можно привыкнуть и, в общем, даже жить.</p>

<h2>Управление зависимостями</h2>

<p>Управления зависимостями в obj-c нет как такового вообще. Библиотеки присоединяются к проекту либо в уже откомпилированном виде, либо в виде сорцовых файлов. И то и другое нужно держать в репозитории. Для особо продвинутых есть git submodules. Вообще, у меня такое ощущение, что использование любых сторонних библиотек не очень поощряется самим Apple и какой-то частью community. Мне же после java/scala/ruby/python-дева писательство велосипедов кажется уже такой явной глупостью, что это даже не требует каких-то объяснений. Немного порывшись в интернетах, я обнаружил несколько инструментов для управления проектами. Из них самым внятным и стабильными выглядит <a href="https://github.com/CocoaPods/CocoaPods">CocoaPods</a>, очень похожий на рубёвый bundler. Его я тоже собираюсь попробовать, как только будет возможность.</p>

<h2>Заключение</h2>

<p>Этот пост я писал очень уж долго и решил, что рискую оставить его пылиться на ноутбуке вечно. Так что, пожалуй, буду закругляться, несмотря на то что были ещё какие-то мысли и замечания. Может, когда-нибудь ещё наберётся каких-то вещей на ещё один пост. Так, например, полезный опыт приделывания xcode и консольных утилит к Jenkins и настройка непрерывного деплоя через <a href="testflightapp.com">TestFlight</a> вполне потянет на таковой, если дойдут руки. Пока же всем спасибо за внимание и удачно провести праздники :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS-dev: первые впечатления. Язык.]]></title>
    <link href="http://digal.github.com/blog/2011/11/22/ios-impressions/"/>
    <updated>2011-11-22T10:22:00+04:00</updated>
    <id>http://digal.github.com/blog/2011/11/22/ios-impressions</id>
    <content type="html"><![CDATA[<p>Недели три назад мне пришлось основательно взяться за разработку под iOS и (куда же тут без него) Objective-C. Из всего опыта была только прочитанная летом наполовину <a href="http://oreilly.com/catalog/9781449397296">книжка</a> по сабжу, пару раз открытый XCode, и попытка собрать <a href="http://www.scummvm.org/">ScummVM</a> для iPad из сорцов. Надо сказать что идея овладеть obj-c появилась у меня в голове ещё больше года назад (с появлением iPad), а после переезда на мак этому не оставалось уже никаких препятствий.</p>

<!--more-->


<p>Заранее извиняюсь у экспертов в iOS-деве за возможные ляпы: всё-таки, несколько недель это слишком мало чтобы досконально изучить все тонкости разработки под новую для себя платформу (но в самый раз чтобы зафиксировать впечатления, пока они не успели выветриться из головы). Если вы найдёте какую-то неточность или ошибку - пишите и я обязательно постараюсь её исправить.</p>

<h2>Тёплые ламповости</h2>

<p>Итак, первое что бросается в глаза тому, кто приходит писать под Cocoa (это, если кто не знает, UI-фреймворк в OSX/iOS) - непривычно выглядящий Objective-C. Многие ставят ему в вину необычный синтаксис для вызова методов (которые являются smalltalk-style посылкой сообщений). На самом деле, синтаксис любого языка это, конечно же дело вкуса, и, наверное, самая малая часть из того, к чему приходится привыкать при разработке под новую платформу.</p>

<p>С другой стороны, привычка (выработанная в Scala) выстраивать вызовы методов в длинные цепочки приводит к совершенно нечитаемым кускам кода:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="p">[</span><span class="n">webView</span> <span class="nl">loadRequest:</span><span class="p">[</span><span class="n">NSURLRequest</span> <span class="nl">requestWithURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">fileURLWithPath:</span><span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">pathForResource:</span><span class="s">@&quot;test&quot;</span> <span class="nl">ofType:</span><span class="s">@&quot;html&quot;</span><span class="p">]</span> <span class="nl">isDirectory:</span><span class="n">NO</span><span class="p">]]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Единственный способ сделать это читаемым - вынести результаты вызовов методов в отдельные переменные. Но даже это окончательно не решит проблему: даже простой вызов метода с четыремя параметрами вполне может не влезть в одну строку, благодаря необходимости указывать имена аргументов и любви создателей библиотек к длинными именам. Последнее, кстати, частично вызвано отсутствием хоть какой-либо системы неймспейсов: приходится следить за уникальностью имён классов, добавляя к ним префиксы.</p>

<p>Ешё одно наследие C, сильно раздражающее перебежчиков из других языков - необходимость создания отдельных заголовочных файлов (.h). Это сразу в два раза увеличивает количество сорцовых файлов в проекте, а любое более-менее серьёзное изменение требует правки сразу обоих файлов.</p>

<h2>Нераскрытые возможности</h2>

<p>Впрочем, это всё мелочи, с которыми можно смириться. Можно даже их любить, если вас греет ощущение использования тёплого лампового языка. От чего действительно становится немного грустно, так это (как ни странно) от его достоинств и клёвых фич. Здесь Objective-C немного напоминает JavaScript лет 5-10 назад, когда большинство программистов на нём просто до конца не понимали что им делать со всей этой динамичностью, прототипами и замыканиями.</p>

<p>Итак, как я уже говорил, вызов метода в Objective-C является передачей сообщения от одного объекта другому. Это очень похоже на то, как это сделано в Ruby. Предвидя возмущение некоторых поклонников Erlang от того факта что передача сообщений происходит синхронно (а поэтому сообщения там &#8220;ненастоящие&#8221;), надо заметить что впервые эта концепция и терминология была предложена в Smalltalk (если не раньше), лет эдак за 15 до Erlang.</p>

<p>Как и Ruby, Objective-C <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtDynamicResolution.html">умеет</a> обрабатывать неизвестные сообщения (то есть те, для которых не написаны методы). Однако, в отличие от Ruby или Groovy, где возможности метапрограмминга используются на полную катушку, obj-c разработчики, похоже, рассматривают эту возможность скорее как метод расстановки костылей. Хотя лично мне кажется, что аналог <a href="http://guides.rubyonrails.org/active_record_querying.html#dynamic-finders">dynamic finders в activerecord</a> был бы отличным дополнением к core data.</p>

<p>Ещё одна относительно новая фича языка, блоки (&#8220;form of closures&#8221;, как говорит википедия), практически не используется в полную силу. Похоже, ни разработчики библиотек, ни прикладные ios-девелоперы просто не понимают, зачем им это нужно. Хотя, в отличие от предыдущего примера с dynamic finders, мне удалось найти несколько библиотек, пытающихся прикрутить ФП к Objective-C. Самая развесистая - это, пожалуй, <a href="https://github.com/mogeneration/functionalkit/">FunctionalKit</a>.</p>

<h2>Остальное</h2>

<p>С остальными вещами всё более-менее понятно: это протоколы (читай интерфейсы), категории (иногда их ошибочно <a href="http://stackoverflow.com/questions/1244748/objective-c-category-compared-to-mixins">считают</a> миксинами, хотя они скорее являются формой манки-патчинга) и полуавтоматический менеджмент указателей. Последнее, наверное, пугает java- и других &#8220;высокоуровневых&#8221; девелоперов больше всего, однако на практике здесь всё просто. Хотя не к месту всунутый autorelease может доставить немало приятных минут в дебаггере, а устроить себе утечку памяти - вообще как нефиг делать. Всё это хорошо описано и давно используется в повседневной разработке.</p>

<p>Это пожалуй всё, что я хотел сказать об Objective-C. В следующем посте (или постах) я постараюсь рассказать об инструментах разработки и экосистеме этой платформы в целом.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Squeryl: Двигаемся дальше]]></title>
    <link href="http://digal.github.com/blog/2011/10/03/squeryl-advanced/"/>
    <updated>2011-10-03T22:38:00+04:00</updated>
    <id>http://digal.github.com/blog/2011/10/03/squeryl-advanced</id>
    <content type="html"><![CDATA[<p>Итак, продолжаем наше знакомство со <a href="http://squeryl.org/">Sueryl</a> (начало <a href="https://digal.github.com/blog/2011/09/25/squeryl/">тут</a>). Для начала, вернёмся к селектам и рассмотрим одну из интереснейших фич Squeryl.</p>

<!--more-->


<h2>Составные селекты</h2>

<p>Итак, <code>select</code> в любой его форме возвращает нам объект класса <code>Query</code> (кроме <code>lookup</code>, возвращающего <code>Option</code>). Этот класс играет сразу две роли. Во-первых, из него можно просто получить результат выборки, используя его в качестве обычной коллекции (он расширяет трейт <code>Iterable</code>). А во-вторых (и это самое интересное) - его можно использовать для построения более сложных запросов к базе. Например, подсунуть его в <code>from</code> вместо таблицы:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">rated</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">users</span><span class="o">.</span><span class="n">where</span><span class="o">(</span> <span class="n">_</span><span class="o">.</span><span class="n">rating</span><span class="o">.~</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">vasyasRated</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">from</span><span class="o">(</span><span class="n">rated</span><span class="o">)</span> <span class="o">(</span> <span class="n">u</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">select</span><span class="o">(</span><span class="n">u</span><span class="o">)</span>
</span><span class='line'>        <span class="n">where</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="n">name</span> <span class="n">like</span> <span class="s">&quot;%Vasya%&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>В этом примере мы использовали запрос <code>rated</code> для построения второго запроса. (Кстати, в первом посте я не упомянул о маленьком но полезном кусочке синтаксического сахара: упрощённом синтаксисе для <code>select</code>. Пример его использования можно увидеть в первом запросе.)</p>

<p>Можно и использовать результат одного селекта внутри блока <code>where</code> второго:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">val</span> <span class="n">vasyasRated</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">from</span><span class="o">(</span><span class="n">users</span><span class="o">)</span> <span class="o">(</span> <span class="n">u</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">select</span><span class="o">(</span><span class="n">u</span><span class="o">)</span>
</span><span class='line'>        <span class="n">where</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="n">id</span> <span class="n">in</span>
</span><span class='line'>          <span class="n">from</span><span class="o">(</span><span class="n">rated</span><span class="o">)</span> <span class="o">(</span><span class="n">r</span> <span class="k">=&gt;</span> <span class="n">select</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="n">id</span><span class="o">))</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>    <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ну и, в конце концов можно добавить к <code>Query</code> разные полезные модификаторы. Для постраничной выборки:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="n">from</span><span class="o">(</span><span class="n">users</span><span class="o">)</span> <span class="o">(</span> <span class="n">u</span> <span class="k">=&gt;</span> <span class="o">...</span> <span class="o">).</span><span class="n">page</span><span class="o">(</span><span class="n">offset</span><span class="o">,</span> <span class="n">pageLength</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>для выборки уникальных строк:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="n">from</span><span class="o">(</span><span class="n">users</span><span class="o">)</span> <span class="o">(</span> <span class="n">u</span> <span class="k">=&gt;</span> <span class="o">...</span> <span class="o">).</span><span class="n">distinct</span>
</span></code></pre></td></tr></table></div></figure>


<p>или для выборки элементов для обновления (директива FOR UPDATE в SQL):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="n">from</span><span class="o">(</span><span class="n">users</span><span class="o">)</span> <span class="o">(</span> <span class="n">u</span> <span class="k">=&gt;</span> <span class="o">...</span> <span class="o">).</span><span class="n">forUpdate</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Всё это, при желании, даёт возможность писать код максимально соответствующий принципу DRY (&#8220;don&#8217;t repeat yourself&#8221;, если вдруг кто не знает).</p>

<h2>Агрегация</h2>

<p>Агрегация - это, наверное, единственная часть DSL, где Squeryl отходит от SQL: вместо использования <code>select</code>, агрегирующие функции описываются в конструкии <code>compute</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">val</span> <span class="n">ratingDistribution</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">from</span><span class="o">(</span><span class="n">users</span><span class="o">)</span> <span class="o">(</span> <span class="n">u</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">groupBy</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="n">rating</span><span class="o">)</span>
</span><span class='line'>        <span class="n">compute</span><span class="o">(</span><span class="n">count</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="n">id</span><span class="o">))</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ratingDistribution</span> <span class="n">foreach</span> <span class="o">{</span> <span class="n">r</span><span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot;%s: %s&quot;</span> <span class="n">format</span> <span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="n">key</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="n">measures</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Результатом такого кода становится объект вида <code>Query[ GroupWithMeasures[Int, Int] ]</code>, который можно использовать явно, обращаясь к полям <code>key</code> и <code>measures</code>, либо приведя его к коллекции типа <code>Map</code>, вызовом метода <code>toMap</code>.</p>

<h2>Join</h2>

<p>С джойнами тоже всё довольно просто. Обычный INNER JOIN так же как и в SQL можно делать неявно, просто сделав <code>select</code> из двух таблиц и добавив условие в <code>where</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="n">from</span><span class="o">(</span><span class="n">users</span><span class="o">,</span> <span class="n">posts</span><span class="o">)</span> <span class="o">(</span> <span class="o">(</span><span class="n">u</span><span class="o">,</span><span class="n">p</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">select</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="n">name</span><span class="o">,</span> <span class="n">p</span><span class="o">)</span>
</span><span class='line'>      <span class="n">where</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="n">id</span> <span class="o">===</span> <span class="n">p</span><span class="o">.</span><span class="n">userId</span><span class="o">)</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Можно использовать OUTER JOIN и всё, к чему вы привыкли в SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="n">from</span><span class="o">(</span><span class="n">users</span><span class="o">,</span> <span class="n">avatars</span><span class="o">.</span><span class="n">leftOuter</span><span class="o">)</span> <span class="o">(</span> <span class="o">(</span><span class="n">u</span><span class="o">,</span><span class="n">a</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">select</span><span class="o">(</span><span class="n">u</span><span class="o">,</span> <span class="n">a</span><span class="o">.</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'>      <span class="n">on</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="n">id</span> <span class="o">===</span> <span class="n">a</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">_</span><span class="o">.</span><span class="n">userId</span><span class="o">))</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>В случае использования внешнего джойна, для юзера не всегда находится соответствующая аватарка, поэтому <code>a</code> в этом примере имеет тип Option.</p>

<h2>Relations</h2>

<p>Зачастую, одна из самых сложных для понимания и использования вещей в обычных ORM - отношения one-to-many и many-to-many между таблицами. Именно там кроется большая часть граблей, на которые наступают неопытные разработчики.</p>

<p>Подобно scala collections, имеющим две ипостаси: immutable и mutable, отношения в Squeryl делятся на <strong>stateless</strong>, являющиеся, по-сути, заранее подготовленными запросами (<code>Query</code>) и <strong>stateful</strong> хранящими все связанные записи в памяти в виде коллекции (<code>Iterable</code>).</p>

<p>Для использования любого из этих вариантов, мы должны описать связь между таблицами в нашей схеме.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>
</span><span class='line'>    <span class="k">object</span> <span class="nc">MySchema</span> <span class="k">extends</span> <span class="nc">Schema</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">users</span> <span class="k">=</span> <span class="n">table</span><span class="o">[</span><span class="kt">User</span><span class="o">]</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">posts</span> <span class="k">=</span> <span class="n">table</span><span class="o">[</span><span class="kt">Post</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">val</span> <span class="n">userPosts</span> <span class="k">=</span>
</span><span class='line'>        <span class="n">oneToManyRelation</span><span class="o">(</span><span class="n">users</span><span class="o">,</span> <span class="n">posts</span><span class="o">)</span> <span class="n">via</span> <span class="o">(</span> <span class="o">(</span><span class="n">u</span><span class="o">,</span><span class="n">p</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="n">u</span><span class="o">.</span><span class="n">id</span> <span class="o">===</span> <span class="n">p</span><span class="o">.</span><span class="n">userId</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>В этом посте я возьму для примера отношения one-to-many. DSL для описания many-to-many не сильно от него отличается и хорошо описан в <a href="http://squeryl.org/relations.html">документации</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">case</span> <span class="k">class</span> <span class="nc">User</span> <span class="o">(....)</span> <span class="k">extends</span> <span class="nc">KeyedEntity</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//OneToMany[Post] &lt; Query</span>
</span><span class='line'>      <span class="k">lazy</span> <span class="k">val</span> <span class="n">posts</span> <span class="k">=</span> <span class="nc">MySchema</span><span class="o">.</span><span class="n">userPosts</span><span class="o">.</span><span class="n">left</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="k">class</span> <span class="nc">User</span> <span class="o">(....)</span> <span class="k">extends</span> <span class="nc">KeyedEntity</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//ManyToOne[User] &lt; Query</span>
</span><span class='line'>      <span class="k">lazy</span> <span class="k">val</span> <span class="n">user</span> <span class="k">=</span> <span class="nc">MySchema</span><span class="o">.</span><span class="n">userPosts</span><span class="o">.</span><span class="n">right</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Теперь мы можем использовать наш релейшен так же как и обычный <code>select</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">p</span> <span class="k">&lt;-</span> <span class="n">user</span><span class="o">.</span><span class="n">posts</span><span class="o">)</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">title</span><span class="o">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Кроме этого, stateless relations имеют несколько полезных методов для манипулирования дочерними элементами:</p>

<ul>
<li><code>assign</code> - привязывает дочерний элемент родительскому, выставляя значение foreign key (имеет смысл только если foreign key - изменяемое поле)</li>
<li><code>associate</code> - делает <code>assign</code> + сохраняет эту связь в базе</li>
<li><code>deleteAll</code> - удаляет все дочерние элементы из базы</li>
</ul>


<p>Объявление stateful relation не сильно сложнее:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">case</span> <span class="k">class</span> <span class="nc">User</span> <span class="o">(....)</span> <span class="k">extends</span> <span class="nc">KeyedEntity</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//StatefulOneToMany[Post] &lt; Iterable[Post]</span>
</span><span class='line'>      <span class="k">lazy</span> <span class="k">val</span> <span class="n">posts</span> <span class="k">=</span> <span class="nc">MySchema</span><span class="o">.</span><span class="n">userPosts</span><span class="o">.</span><span class="n">leftStateful</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="nc">User</span> <span class="o">(....)</span> <span class="k">extends</span> <span class="nc">KeyedEntity</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//StetefulManyToOne[User]</span>
</span><span class='line'>      <span class="k">lazy</span> <span class="k">val</span> <span class="n">user</span> <span class="k">=</span> <span class="nc">MySchema</span><span class="o">.</span><span class="n">userPosts</span><span class="o">.</span><span class="n">rightStateful</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>По сути, stateful relations являются простыми врапперами вокруг stateless, добавляющими кеширование данных в памяти, что избавляет Squeryl от необходимость делать запрос к базе при каждом обращении к коллекции.</p>

<h2>Недостатки</h2>

<p>Трудно сказать, является это недостатком Squeryl или моим, однако не все механизмы работы этого DSL мне до конца ясны. В частности, я так и не понял, с применением какой магии обычные поля классов модели конвертируются в метаданные столбцов в базе. Ведь это делается не только при создании таблицы, но и во время компиляции (или уже в рантайме) замыканий внутри запросов (например, <code>where</code>).</p>

<p>Один раз, когда мне надо было вынести один из часто используемых паттернов для апдейтов в отдельный метод, магия DSL отказалась работать и мне пришлось расковырять библиотеку и извлечь на свет страннейший артефакт чёрной магии под названием (осторожно): <code>createEqualityExpressionWithLastAccessedFieldReferenceAndConstant</code>. Вам страшно? Мне тоже. Хорошо что такой случай был пока один, и у вас есть все шансы не напороться даже на него (уж больно он специфический).</p>

<p>А вот с казалось бы элементарными, но не всегда работающими implicit conversions, являющимися неотъемлемой частью любого скаловского DSL, дело обстоит хуже. Приведу один только пример. В этом кусочке условия в <code>where</code> я пытаюсь использовать ещё одну замечательную фичу - динамический запрос (то есть запрос, части которого включаются по условию, обычно при заполнении <code>Option</code>, подробнее <a href="http://squeryl.org/dynamic-queries.html">тут</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="n">where</span> <span class="o">(</span> <span class="n">u</span><span class="o">.</span><span class="n">flag</span> <span class="o">===</span> <span class="n">boolOpt</span><span class="o">.?</span> <span class="o">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Очевидно, здесь DSL вступает в конфликт с синтаксическим сахаром для булевских условий (поскольку для строковых полей всё работает). Перепробовав несколько вариантов, я пришёл к вот такому вот монструозному решению:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="n">not</span><span class="o">(</span><span class="n">not</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="n">flag</span><span class="o">)).</span><span class="n">inhibitWhen</span><span class="o">(</span><span class="n">boolOpt</span> <span class="o">!=</span> <span class="nc">Some</span><span class="o">(</span><span class="kc">true</span><span class="o">))</span> <span class="err"> </span>
</span><span class='line'>    <span class="n">and</span><span class="err"> </span>
</span><span class='line'>    <span class="n">not</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="n">flag</span><span class="o">).</span><span class="n">inhibitWhen</span><span class="o">(</span><span class="n">boolOpt</span> <span class="o">!=</span> <span class="nc">Some</span><span class="o">(</span><span class="kc">false</span><span class="o">))</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Обратите внимание на изящный двойной <code>not</code>, который пришлось использовать в качестве подсказки компилятору. Судя по всему, я оказался не единственным, кто столкнулся с этой проблемой: на StackOveflow мне <a href="http://stackoverflow.com/questions/7607449/booleans-in-squeryl-dynamic-queries/7640585#7640585">сообщили</a> что в следующей версии этот сахар будет выключен и посоветовали более изящное решение с применением уже знакомого нам оператора <code>~</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="n">where</span> <span class="o">(</span> <span class="n">u</span><span class="o">.</span><span class="n">flag</span> <span class="o">===</span> <span class="n">boolOpt</span><span class="o">.~.?</span> <span class="o">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>Заключение</h2>

<p>Несмотря на некоторые недостатки, умолчать о которых было бы просто нечестно, Squeryl - замечательная библиотека, позволяющая решить кучу типичных проблем при использовании реляционных БД, не увеличивая сложность и размер кода. Лично я буду использовать её и дальше, что и вам советую делать.</p>

<p>Эти два поста, посвящённые squeryl были в некотором роде заготовкой для выступления на нашем Scala-евенте (хотя это ещё вопрос, что вышло полуфабрикатом, а что полноценным туториалом). Видео моего (и не только) выступления можно найти в небольшом <a href="http://habrahabr.ru/company/e-Legion/blog/130545/#comments">отчёте с него</a>, а слайды у меня на <a href="http://dl.dropbox.com/u/12823109/squeryl.pdf">дропбоксе</a> (кавайные белочки инсайде). Удачи и до встреч.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Squeryl: основы]]></title>
    <link href="http://digal.github.com/blog/2011/09/25/squeryl/"/>
    <updated>2011-09-25T21:46:00+04:00</updated>
    <id>http://digal.github.com/blog/2011/09/25/squeryl</id>
    <content type="html"><![CDATA[<p>Этим и следующим постом (который, надеюсь, будет вот совсем скоро) я хочу познакомить вас с замечательной ORM-библиотекой для scala, которую сейчас использую в одном из рабочих проектов. Не надо пугаться аббревиатуры ORM: возожности маппинга к объектам здесь принципиально реализованы на совсем базовом уровне, а вот симпатичный DSL для запросов стоит того, чтобы на него взглянуть.</p>

<!--more-->


<p>Каждый, кто когда-либо пытался использовать &#8220;традиционные&#8221; ORM типа Hibernate знает, что тот уровень абстракций, которые они предоставляют, хорошо работает только для простых запросов. Как только возникает потребность сделать выборку более или менее сложную либо по условию, либо по выдаваемому набору данных, разработчику приходится начинать сражение с высокоуровневым языком запросов (типа HQL), использование которого несёт в себе сразу ряд проблем. Во-первых, это ещё один язык запросов, похожий на SQL, но им не являющийся. Во-вторых, сразу теряются остатки type safety. В-третьих, при любом изменении схемы нужно проверять и править ручками <strong>все</strong> строки запросов в коде. Добавьте сюда сложную внутреннюю логику ORM, когда программисту довольно сложно сходу понять, когда и какие именно запросы будут сделаны к базе и частенько страдающую производительность.</p>

<p><a href="http://squeryl.org/">Squeryl</a> - это scala-библиотека, призванная решить хотя бы часть этих проблем, и делает она это с широкомасштабным применением средств языка, а именно заточенностью под DSL и строгой типизацией всего что только можно. Таким образом, запросы имеют структуру, похожую на обычный SQL, являясь при этом scala-кодом. Scala-код, в отличие от SQL-запросов, тщательно проверяется компилятором, который сделает вам ататат, как только вы попытаетесь вписать строку в столбец типа Int или хотя бы сделать сравнение столбца типа Date с булевским значением.</p>

<h2>Инициализация</h2>

<p>Итак, для начала нужно инициализировать драйвер и реализовать фабрику сессий. Не надо пугаться названия, это всего лишь функция, возвращающая экземпляр класса Session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">import</span> <span class="nn">org.squeryl.SessionFactory</span>
</span><span class='line'>
</span><span class='line'>      <span class="nc">Class</span><span class="o">.</span><span class="n">forName</span><span class="o">(</span><span class="s">&quot;org.h2.Driver&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nc">SessionFactory</span><span class="o">.</span><span class="n">concreteFactory</span> <span class="k">=</span> <span class="nc">Some</span> <span class="o">{</span> <span class="o">()</span><span class="k">=&gt;</span>
</span><span class='line'>        <span class="nc">Session</span><span class="o">.</span><span class="n">create</span><span class="o">(</span>
</span><span class='line'>          <span class="n">java</span><span class="o">.</span><span class="n">sql</span><span class="o">.</span><span class="nc">DriverManager</span><span class="o">.</span><span class="n">getConnection</span><span class="o">(</span><span class="s">&quot;jdbc:h2:mem:&quot;</span><span class="o">),</span>
</span><span class='line'>          <span class="k">new</span> <span class="n">H2Adapter</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Это довольно простая реализация, в реальном проекте скорее всего будет уместнее использовать connection pool, типа <a href="http://commons.apache.org/dbcp/">DBCP</a> или <a href="http://jolbox.com/">BoneCP</a>.</p>

<h2>Транзакции</h2>

<p>С транзакциями всё просто: транзакция осуществляется с помощью двух методов <code>transaction</code> и <code>inTransaction</code>, которые, принимая на вход функцию, оборачивают её выполнение в транзакцию.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">import</span> <span class="nn">org.squeryl.PrimitiveTypeMode._</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">transaction</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//операции с данными ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span> <span class="c1">//коммит транзакции</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Их отличие состоит в том, что <code>transaction</code> всегда открывает новую транзакцию перед началом выполнения блока и коммитит после завершения, a <code>inTransaction</code> делает это только в том случае, если не находится внутри другой транзакции.</p>

<h2>Схема.</h2>

<p>Следующим шагом, как и в других ORM, будет объявление схемы. Есть два режима работы со squeryl: использование примитивных типов (PrimitiveTypeMode) и типов-врапперов (CustomTypeMode), которые могут, например, включать в себя валидацию. Собственно для работы с DSL, необходим импорт членов одного из этих объектов (как это сделано в первой строчке предыдущего листинга).</p>

<p>Классы схемы могут быть любыми скаловскими классами, поля, объявленные в конструкторе будут столбцами. Поля могут быть как mutable, так и immutable. Я предпочитаю для большей ясности использовать второй вариант в сочетании с case-классами и при необходимости просто вызывать метод copy. Однако, стоит заметить что этот способ имеет свои недостатки (например, не будет работать &#8220;из коробки&#8221; optimistic concurrency control, поскольку поле с версией не будет копироваться при вызове copy).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">case</span> <span class="k">class</span> <span class="nc">User</span><span class="o">(</span>
</span><span class='line'>      <span class="n">id</span><span class="k">:</span>     <span class="kt">Long</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>      <span class="nd">@Column</span><span class="o">(</span><span class="n">length</span> <span class="k">=</span> <span class="mi">256</span><span class="o">)</span>
</span><span class='line'>      <span class="n">email</span><span class="k">:</span>  <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>      <span class="n">name</span><span class="k">:</span>   <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>      <span class="n">rating</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>    <span class="o">)</span> <span class="k">extends</span> <span class="nc">KeyedEntity</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Трейт KeyedEntity просто говорит Squeryl что id является первичным ключом, позволяя, например, упростить поиск записи по id до вызова единственного метода <code>lookup(id)</code> над таблицей.</p>

<p>Таблицы и связи между ними описываются в классе, отнаследованным от Schema, в большинстве случаев можно сделать его синглтоном:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">object</span> <span class="nc">MySchema</span> <span class="k">extends</span> <span class="nc">Schema</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">users</span> <span class="k">=</span> <span class="n">table</span><span class="o">[</span><span class="kt">User</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">on</span><span class="o">(</span><span class="n">users</span><span class="o">)</span> <span class="o">{</span> <span class="n">u</span> <span class="k">=&gt;</span> <span class="n">declare</span><span class="o">(</span>
</span><span class='line'>          <span class="n">u</span><span class="o">.</span><span class="n">id</span>    <span class="n">is</span> <span class="o">(</span><span class="n">autoIncremented</span><span class="o">),</span>
</span><span class='line'>          <span class="n">u</span><span class="o">.</span><span class="n">email</span> <span class="n">is</span> <span class="o">(</span><span class="n">unique</span><span class="o">)</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Наличие схемы, как в любом приличном ORM избавляет необходимости писать тонны SQL CREATE ручками. Для создания схемы в базе можно воспользоваться методом <code>create</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="n">transaction</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">MySchema</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Аналогично, для импорта схемы в виде SQL, есть метод <code>printDdl</code>, а для очистки базы - <code>drop</code>.</p>

<h2>Insert</h2>

<p>Итак, мы объявили схему и можем приступить к тому, ради чего, собственно, всё и затевалось. Для начала создадим несколько пользователей:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">import</span> <span class="nn">MySchema._</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">vasya</span> <span class="k">=</span> <span class="n">users</span><span class="o">.</span><span class="n">insert</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="s">&quot;vasya@example.com&quot;</span><span class="o">,</span> <span class="s">&quot;Vasya Poupkine&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">masha</span> <span class="k">=</span> <span class="n">users</span><span class="o">.</span><span class="n">insert</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="s">&quot;masha@example.com&quot;</span><span class="o">,</span> <span class="s">&quot;Masha Petrova&quot;</span><span class="o">))</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>Select</h2>

<p>Select в squeryl является практически двойником оного в SQL за исключением того, написан на Scala со всеми вытекающими плюшками:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">import</span> <span class="nn">MySchema._</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">nullRated</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">from</span><span class="o">(</span><span class="n">users</span><span class="o">)</span> <span class="o">(</span> <span class="n">u</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">select</span><span class="o">(</span><span class="n">u</span><span class="o">)</span>
</span><span class='line'>        <span class="n">where</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="n">rating</span> <span class="o">===</span> <span class="mi">0</span><span class="o">)</span> <span class="c1">//(1)</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">mails</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">from</span><span class="o">(</span><span class="n">users</span><span class="o">)</span> <span class="o">(</span> <span class="n">u</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">select</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="n">email</span><span class="o">)</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">idsWithMails</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">from</span><span class="o">(</span><span class="n">users</span><span class="o">)</span> <span class="o">(</span> <span class="n">u</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">select</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="n">id</span><span class="o">,</span> <span class="n">u</span><span class="o">.</span><span class="n">email</span><span class="o">)</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Обратите внимание на тройное <code>===</code> (1). В отличие от обычного двойного <code>==</code>  - это не встроенный в scala оператор, а конструкция DSL Squeryl.
Трейт <code>KeyedEntity</code> даёт нам возможность использовать упрощённый синтаксис для поиска записи по id:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">val</span> <span class="n">zeroUser</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">User</span><span class="o">]</span> <span class="k">=</span> <span class="n">users</span><span class="o">.</span><span class="n">lookup</span><span class="o">(</span><span class="n">id</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Update</h2>

<p>Операция обновления в squeryl поддерживает два вида синтаксиса: частичное и полное обновление. Полное обновление, как следует из названия, использует в качестве источника обновлённых данных объект целиком. Поскольку в нашем примере классы целиком иммутабельны, мы будем подсовывать в update объекты, созданные через метод copy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">val</span> <span class="n">updatedVasya</span> <span class="k">=</span> <span class="n">vasya</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">rating</span> <span class="k">=</span> <span class="n">vasya</span><span class="o">.</span><span class="n">rating</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="n">users</span><span class="o">.</span><span class="n">update</span><span class="o">(</span><span class="n">updatedVasya</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Полный update всегда обновляет только одну запись, поэтому ничего не возвращает.</p>

<p>При частичном обновлении используется конструкция DSL, похожая на ту, которую мы использовали в select:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">val</span> <span class="n">updated</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">update</span><span class="o">(</span><span class="n">users</span><span class="o">)</span> <span class="o">(</span> <span class="n">u</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">set</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="n">rating</span> <span class="o">:=</span> <span class="n">u</span><span class="o">.</span><span class="n">rating</span><span class="o">.~</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="c1">//(1)</span>
</span><span class='line'>        <span class="n">where</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="n">name</span> <span class="n">like</span> <span class="s">&quot;%Vasya%&quot;</span><span class="o">)</span>    <span class="c1">//(2)</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;%s Vasyas rated&quot;</span> <span class="n">format</span> <span class="n">updated</span><span class="o">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Как это принято в JDBC, update возвращает количество обновлённых записей.</p>

<p>Опять обратим внимание (1) на использование DSL-оператора присваивания (<code>:=</code>) вместо &#8216;родного&#8217; <code>=</code> и на, конструкцию <code>.~</code>, применяющуюся в PrimitiveTypeMode для того, чтобы компилятор не путал оператор <code>+</code> у скаловского Int с таким же оператором в DSL. Вместо конструкци <code>field.~ + value</code> можно использовать <code>field plus value</code>, кому как нравится. Кроме того, мы использовали (2) ещё один оператор сравнения - SQL LIKE.</p>

<h2>Delete</h2>

<p>Удаление выполняется аналогично: либо по id (для классов, с примешанным KeyedEntity) либо по условию.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="n">users</span><span class="o">.</span><span class="n">deleted</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">deleted</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">users</span><span class="o">.</span><span class="n">deleteWhere</span><span class="o">(</span> <span class="n">u</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">u</span><span class="o">.</span><span class="n">rating</span><span class="o">.~</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;%s users deleted&quot;</span> <span class="n">format</span> <span class="n">deleted</span><span class="o">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>Продолжение следует</h2>

<p>В следующем посте я постараюсь рассмотреть &#8220;продвинутые&#8221; функции squeryl: джойны, связи 1-to-many и many-to-many, составные запросы, итд. И ещё постараюсь не забыть пройтись с критикой по тем местам библиотеки, которые ещё требуют полировки. Критика и отзывы, как обычно приветствуются. До встречи.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixtures]]></title>
    <link href="http://digal.github.com/blog/2011/09/07/fixtures/"/>
    <updated>2011-09-07T09:46:00+04:00</updated>
    <id>http://digal.github.com/blog/2011/09/07/fixtures</id>
    <content type="html"><![CDATA[<p>В предыдущем посте я рассказывал об исполняемых конфигах ostrich и не упомянул особых их достоинств, кроме type safety и удобства работы с настройками со стороны приложения. На прошлой неделе я наткнулся на ещё один хороший юзкейс для таких конфигов.</p>

<p>Предположим, мы развёртываем наше приложение в разных окружениях (dev, test, prod), и в некоторых из них было бы здорово иметь в базе некоторые начальные данные для упрощения, например, процесса тестирования. Есть несколько достаточно тривиальных, но не очень удобных способов решения этой проблемы, особенно если загрузка этих начальных данных - часть автоматического развёртывания через CI-сервер. В скриптовых языках, где исполняемые файлы настроек - норма, такие данные (называемые fixtures) часто делаются частью конфига.</p>

<p>С ostrich реализация такой штуки становится делом буквально нескольких строк кода:</p>

<!--more-->


<p>Итак, для начала добавим соответствующее поле в наш базовый конфиг, он же конфиг по умолчанию. Мы воспользуемся тем, что scala - функциональный язык, а конфиг в свою очередь - это обычный scala-класс.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">class</span> <span class="nc">DBConfig</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/** Нужно ли сбросить и пересоздать базу? */</span>
</span><span class='line'>      <span class="k">var</span> <span class="n">doReset</span> <span class="k">=</span> <span class="kc">false</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/** Код, который нужно исполнить, если doReset == true */</span>
</span><span class='line'>      <span class="k">var</span> <span class="n">fixtures</span><span class="k">:</span> <span class="o">(</span><span class="kt">DB</span> <span class="o">=&gt;</span> <span class="kt">Unit</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span><span class="n">db</span> <span class="k">=&gt;</span> <span class="o">()}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>По умолчанию, поле fixtures - это ничего не делающая функция. Теперь добавим в код, отвечающий за инициализацию базы, обработку новых полей:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">DB</span><span class="o">(</span><span class="k">val</span> <span class="n">config</span><span class="k">:</span> <span class="kt">DBConfig</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nc">Class</span><span class="o">.</span><span class="n">forName</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="n">driver</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">transaction</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="n">doReset</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//drop and create tables</span>
</span><span class='line'>          <span class="nc">MySchema</span><span class="o">.</span><span class="n">drop</span>
</span><span class='line'>          <span class="nc">MySchema</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//Run fixtures</span>
</span><span class='line'>          <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&quot;Running fixtures&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="n">config</span><span class="o">.</span><span class="n">fixtures</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ну и наконец выставим необходимое значение в поле fixtures в нужных конфигах</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="c1">//myserver-test.scala</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">MyServerConfig</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">dbConfig</span><span class="o">.</span><span class="n">doReset</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>      <span class="n">dbConfig</span><span class="o">.</span><span class="n">fixtures</span> <span class="k">=</span> <span class="o">{</span> <span class="n">db</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="c1">//create test user</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">usr</span> <span class="k">=</span> <span class="n">db</span><span class="o">.</span><span class="n">createUser</span><span class="o">(</span><span class="s">&quot;user@example.com&quot;</span><span class="o">,</span> <span class="s">&quot;password&quot;</span><span class="o">,</span> <span class="s">&quot;ru_RU&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//set user roles</span>
</span><span class='line'>        <span class="n">db</span><span class="o">.</span><span class="n">assignRoleForUser</span><span class="o">(</span><span class="n">usr</span><span class="o">.</span><span class="n">id</span><span class="o">,</span> <span class="nc">Role</span><span class="o">.</span><span class="nc">ADMIN</span><span class="o">)</span>
</span><span class='line'>        <span class="n">db</span><span class="o">.</span><span class="n">assignRoleForUser</span><span class="o">(</span><span class="n">usr</span><span class="o">.</span><span class="n">id</span><span class="o">,</span> <span class="nc">Role</span><span class="o">.</span><span class="nc">STAFF</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Вот, собственно, и всё: никаких самописных форматов для начальных данных, никаких SQL-файлов, которые нужно чинить при каждом изменении схемы. Мы описываем данные самым естественным для нас способом - в виде высокоуровневого кода, работающего с базой и использующего все возможности нашего приложения (и выбранного persistence-фреймворка). Более того, принцип используемый здесь можно легко применить не только к работе с базой, но и к любым другим частям приложения. Нужен тестовый файл в хитром формате, с которым работает наше приложение? Cоздаём его используя соответствующий API и он будет всегда актуален, даже если формат ещё не устаканился и разрабатывается параллельно с приложением.</p>

<p>В общем, с ostrich гибкость настройки приложения ограничена только фантазией разработчика. Я практически уверен, что это не последний пост, посвящённый этой библиотеке.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Пример хорошего UX]]></title>
    <link href="http://digal.github.com/blog/2011/09/05/no-newsletters/"/>
    <updated>2011-09-05T12:15:00+04:00</updated>
    <id>http://digal.github.com/blog/2011/09/05/no-newsletters</id>
    <content type="html"><![CDATA[<p>Регистрируясь на <a href="http://coderwall.com/">coderwall</a> (по наводке <a href="http://twitter.com/shaman_sir">@shaman_sir</a>) увидел замечательный пример той самой области UX, не относящейся ни к дизайну ни к юзабилити. Ничего супер-пупер-грандиозного, просто под полем для ввода электропочты в форме регистрации - небольшое примечание.</p>

<blockquote><p>No spam, always private. We respect the sanctity of your email and share your dislike for spam and unnecessarily frequent newsletters. If you&#8217;re interested in future coderwall news, we suggest you follow us on twitter.</p></blockquote>


<p>Не знаю как вам, а мне безумно приятно видеть сервис, уважающий моё личное информационное пространство и максимально ненавязчиво предлагающий просто подписаться на твиттер, если уж мне так хочется читать относящиеся к нему новости. По-моему, это гораздо лучше обычной галочки &#8220;присылать/не присылать новости&#8221;: в случае с твиттером заранее знаешь, что отписаться при желании можно будет в любой момент и одной кнопкой. Я уже не говорю о случаях, когда пользователю вообще не оставляют никакого выбора.</p>

<p>В общем, я кажется нашёл главный секрет хорошего UX: &#8220;Уважай своего пользователя&#8221;. Просто ведь, правда?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala IRL. Часть 2: Готовим Домашнего Страуса]]></title>
    <link href="http://digal.github.com/blog/2011/08/29/scala-irl-2-ostrich/"/>
    <updated>2011-08-29T22:28:00+04:00</updated>
    <id>http://digal.github.com/blog/2011/08/29/scala-irl-2-ostrich</id>
    <content type="html"><![CDATA[<p>В предыдущем посте я мельком упомянул библиотеку ostrich в качестве инструмента для загрузки конфигов, в этом же постараюсь сделать более подробный обзор. Итак, <a href="github.com/twitter/ostrich">ostrich</a> - это внутренняя библиотека от разработчиков &#8220;твиттера&#8221;, используемая в его компонентах. Несмотря на фичастость и навороченность, местами довольно-таки заметен её стиль, как библиотеки написанной в первую очередь &#8220;для себя&#8221;.</p>

<p>Оstrich выполняет следующие задачи:</p>

<ul>
<li>загрузка и парсинг typesafe-конфигов (проще, говоря, конфигов в виде scala-кода)</li>
<li>сбор рантайм-статистики и разнообразных метрик</li>
<li>управление сервисами внутри процесса (запуск/остановка)</li>
<li>предоставление простенького, но расширяемого администраторского интерфейса через http/socket</li>
</ul>


<p>В этом посте я опишу работу с конфигами, а остальные возможности попробую раскрыть в последующих постах.</p>

<h2>Страус и конфиги</h2>

<p>Итак, ostrich предлагает использовать в качестве конфигов не просто структурированные текстовые файлы (json/xml/properties), а scala-код. Такой подход требует компиляции конфига при загрузке, но имеет ряд серьёзных преимуществ:</p>

<ul>
<li>типизация. Отпадает необходимость проверять и приводить значения из конфиг-файла к нужным типам</li>
<li>возможность писать произвольный код в конфигах, помимо простых значений. Например, использовать текущую дату в произвольном формате в имени лог-файла, или получить значения каких-то параметров из базы или стороннего сервиса. По сути, конфиг-файл становится тем, что называется extension point.</li>
<li>становятся ненужными отдельные классы, инкапсулирующие конфигурацию различных компонентов программы, или, по крайней мере, упрощается их создание.</li>
</ul>


<p>Для начала, нам нужно создать родительский класс для настроек. Чаще всего удобно сделать его же конфигом по умолчанию. Предположим, мы хотим сконфигурировать небольшое серверное приложение. Для этого ostrich предоставляет класс ServerConfig (являющийся наследником Config, предоставляющего базовые функции такие как компиляция, валидация и обязательные/необязательные поля).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">com.twitter.ostrich.admin._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.twitter.ostrich.admin.config._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.twitter.logging.config._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.twitter.logging.Level</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyServerConfig</span> <span class="k">extends</span> <span class="nc">ServerConfig</span><span class="o">[</span><span class="kt">MyServer</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//ServerConfig, в отличие от просто Config, должен определить </span>
</span><span class='line'>  <span class="c1">//метод Apply, для создания инстанса сервера</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">runtime</span><span class="k">:</span> <span class="kt">RuntimeEnvironment</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">MyServer</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">var</span> <span class="n">port</span> <span class="k">=</span> <span class="mi">1234</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">workersNum</span> <span class="k">=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">baseUrl</span> <span class="k">=</span> <span class="s">&quot;http://localhost:%s&quot;</span> <span class="n">format</span> <span class="n">port</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">dbConfig</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">DBConfig</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">DBConfig</span><span class="o">(</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">driver</span> <span class="k">=</span> <span class="s">&quot;org.h2.Driver&quot;</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">uri</span> <span class="k">=</span> <span class="s">&quot;jdbc:h2:mem:&quot;</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">create</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Надо заметить, что мы используем в этом конфиге изменяемые переменные (<code>var</code>). В Scala это зачастую является признаком недостаточно функционального (декларативного) стиля, однако в данном случае это позволит писать лаконичные конфиги, выставляя значение полей простым присваиванием. Кроме того, этот же стиль используется при объявлении уже имеющихся в ServerConfig значений.</p>

<p>Итак, теперь наш конфиг для, например, тестового сервера, может выглядеть так:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">new</span> <span class="nc">MyServerConfig</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">port</span> <span class="k">=</span> <span class="mi">80</span>
</span><span class='line'>      <span class="n">baseUrl</span> <span class="k">=</span> <span class="s">&quot;http://test.myserver.com&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">dbConfig</span><span class="o">.</span><span class="n">uri</span> <span class="k">=</span> <span class="s">&quot;jdbc:h2:/tmp/test.db;AUTO_SERVER=TRUE&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Вполне лаконично, и ничуть не хуже .properties и уж тем более XML-файла. Можем сохранить его под именем <code>test.scala</code>, тогда наш сервер мы сможем запускать как</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    java -jar my-server.jar -f ./test.scala
</span></code></pre></td></tr></table></div></figure>


<h2>Загрузка</h2>

<p>Теперь, наш файл настроек надо загрузить и использовать по назначению. Делать это логичнее всего поближе к точке входа, например в <code>main</code>. Путь к файлу можно передать с параметром <code>-f</code> при запуске приложения, а если его нет, то ostrich попытается найти его сам. Определение местоположения конфиг-файла - это то самое место, где становится видно, что проект делался для себя: ostrich ищет его в довольно специфических местах, пытаясь сначала выяснить имя jar-файла. Поэтому, проще всего всегда передавать путь к конфигу через <code>-f</code> плюс явно указать конфиг по умолчанию. Поскольку конфиг по умолчанию является обычным scala-классом, можно просто создать его инстанс в коде. Вот как выглядит загрузка и использование конфига у меня:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">object</span> <span class="nc">MyServer</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">runtime</span> <span class="k">=</span> <span class="nc">RuntimeEnvironment</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">server</span> <span class="k">=</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">runtime</span><span class="o">.</span><span class="n">configFile</span><span class="o">.</span><span class="n">exists</span><span class="o">)</span> <span class="c1">//если ostrich нашёл конфиг-файл </span>
</span><span class='line'>            <span class="n">runtime</span><span class="o">.</span><span class="n">loadRuntimeConfig</span><span class="o">[</span><span class="kt">Server</span><span class="o">]()</span>
</span><span class='line'>          <span class="k">else</span> <span class="c1">//default</span>
</span><span class='line'>            <span class="o">(</span><span class="k">new</span> <span class="nc">MyServerConfig</span><span class="o">)()(</span><span class="n">runtime</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="n">start</span><span class="o">()</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">MyServer</span><span class="o">(</span><span class="k">val</span> <span class="n">config</span><span class="k">:</span> <span class="kt">MyServerConfig</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">db</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">DB</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="n">dbConfig</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="n">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//...</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Обратите внимание на строчку <code>(new MyServerConfig)()(runtime)</code>: сначала мы вызываем метод apply без параметров, а потом вызываем полученную функцию с параметром типа RuntimeEnvironment. При необходимости, этот способ можно расширить для загрузки различных конфигов по умолчанию, например в зависимости от <code>run.mode</code> в lift.</p>

<p>Я не использовал возможность ostrich объявлять поля как обязательные/опциональные, но промолчать о ней будет, наверное, неправильно. В приведённой к классу Config документации всё довольно просто:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="c1">//необязательное поле</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">something</span> <span class="k">=</span> <span class="n">optional</span><span class="o">[</span><span class="kt">Duration</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//обязательное поле</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">level</span> <span class="k">=</span> <span class="n">required</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//вычисляемое (lazily evaluated!) поле</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">nextLevel</span> <span class="k">=</span> <span class="n">computed</span><span class="o">(</span><span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Конфигурация компонентов</h2>

<p>В вышеприведённом примере мы вынесли настройку базы данных в отдельный класс DBConfig. Иногда, со стороны приложения бывает удобно вынести конфигурацию в отдельный класс, но усложнять структуру конфиг-файла не хочется. Хорошим примером является случай, когда конфигурируемый компонент находится в другом (под)проекте. В этом случае, конфиг можно объявить трейтом и подмешать его в основной конфиг</p>

<p>Представим, что мы хотим добавить в наш север небольшой внутренний почтовый сервис для отсылки писем пользователям.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">MailConfig</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">smtpServer</span><span class="k">:</span>  <span class="kt">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">smtpPort</span><span class="k">:</span>    <span class="kt">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">fromAddress</span><span class="k">:</span> <span class="kt">String</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MailManager</span><span class="o">(</span><span class="k">val</span> <span class="n">config</span><span class="k">:</span> <span class="kt">MailConfig</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Теперь мы просто подмешиваем трейт в наш основной конфиг, перегружая его методы нашими <code>var</code>ами:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">class</span> <span class="nc">MyServerConfig</span>
</span><span class='line'>    <span class="k">extends</span> <span class="nc">ServerConfig</span><span class="o">[</span><span class="kt">MyServer</span><span class="o">]</span>
</span><span class='line'>    <span class="k">with</span> <span class="nc">MailConfig</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">var</span> <span class="n">smtpServer</span> <span class="k">=</span> <span class="n">required</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>      <span class="k">var</span> <span class="n">smtpPort</span> <span class="k">=</span> <span class="mi">24</span>
</span><span class='line'>      <span class="k">var</span> <span class="n">fromAddress</span> <span class="k">=</span> <span class="s">&quot;noreply@domain.com&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>В нашем конфиг-файле (<code>test.scala</code>) эти поля будут работать точно так же как и все остальные. При инстанциировании менеджера можно просто передать ему общий конфиг:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">class</span> <span class="nc">MyServer</span><span class="o">(</span><span class="k">val</span> <span class="n">config</span><span class="k">:</span> <span class="kt">MyServerConfig</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">db</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">DB</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="n">dbConfig</span><span class="o">)</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">mailer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">MailManager</span><span class="o">(</span><span class="n">config</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Также, в отдельный трейт можно вынести готовые значения для настроек если они представляют собой что-то более сложное чем простые значения.</p>

<p>Вот собственно и всё что я хотел рассказать об использовании ostrich для конфигурирования. Я намеренно не стал рассматривать имеющиеся в ServerConfig поля для настройки логгинга, статистики и админки. Мы вернёмся к ним попозже, когда я буду рассказывать о соответствующих фичах &#8220;страуса&#8221;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala IRL. Часть 1: конфиги.]]></title>
    <link href="http://digal.github.com/blog/2011/08/23/scala-irl-1-configs/"/>
    <updated>2011-08-23T22:40:00+04:00</updated>
    <id>http://digal.github.com/blog/2011/08/23/scala-irl-1-configs</id>
    <content type="html"><![CDATA[<p>Для Scala, как для языка довольно молодого, пока ещё нет (а может уже и не будет) единого стандарта для такой обыденной вещи как конфиг-файлы. Вариантов не так уж много и в этом посте я хочу сделать небольшой обзор тех, которые мне так или иначе довелось использовать.</p>

<h3>.properties</h3>

<p>Текстовые и XML файлы, хранящие пары &#8220;ключ-значение&#8221;. Вполне подходят для конфигурирования большинства проектов, а в стандартной библиотеке JRE, есть средства для работы с ними. Что касается поддержки со стороны Scala, в пакете <code>scala.collection</code> есть объекты <code>JavaConverters</code> и <code>JavaConversions</code>, предоставляющие implicit методы для конвертации объектов класса <code>Properties</code> в <code>mutable.Map[String, String]</code>.</p>

<p>Эти файлы часто используются не столько для хранения конфигов, сколько для локализации. Тут нельзя промолчать об одной их особенности, о которой, наверное, знает каждый Java-программист, но которая всегда меня изумляла: в платформе, где Unicode является основной кодировкой для работы со строками, для хранения локализованных строк предлагается формат, <strong>не поддерживаюший unicode</strong>. Файлы предлагается сначала писать в unicode, а потом конвертировать в странный и уродливый формат утилитой native2ascii. Ну не отвратительно ли?</p>

<p>Эти же файлы использует фреймворк Lift (с расширением .props), добавляя к ним <a href="http://www.assembla.com/wiki/show/liftweb/Run_Modes">замысловатый механизм</a> выбора нужного файла в зависимости от режима работы (run mode) и окружения.</p>

<h3>XML и JSON</h3>

<p>Здесь всё понятно: стандартных библиотек целая куча, и старые явовские, и специально сделанные для Scala с вкусностями типа XPath-подобных DSL. Такие конфиги имеют привычку разрастаться до неприличных размеров, а JSON ещё и не умеет удобно работать с длинными и многострочными значениями и не имеет констукции для комментариев. Впрочем, можно просто использовать для этой цели обычные поля, которые при чтении конфига будут игнорироваться.</p>

<h3>configgy</h3>

<p>configgy - замечательная Scala-библиотека, выполняющая сразу две задачи: работа с конфиг-файлами и удобный логгинг. Эти задачи практически никак не связаны между собой (за исключением того, что логгинг тоже надо конфигурировать), но это именно те две задачи, которые требуется решать в практически любом проекте больше сотни строк.</p>

<p>Configgy поддерживает несколько форматов для конфигов, как линейный, так и со вложенными блоками, типа такого:</p>

<pre><code># JDBC parameters
jdbc {
    driver = "com.mysql.jdbc.Driver"
    uri = "jdbc:mysql://localhost:3306/test?characterEncoding=UTF8"
    limit = 5000 # Batch size for selects
}

#logging parameters, see configgy readme for details
log {
    filename = "debug.log"
    level = "debug"
    utc = false
    console = false
}
</code></pre>

<p>Логгинг автоматически подхватывает параметры из секции log при чтении конфига, что очень удобно - вся обычная рутина с конфигурированием сводится практически к одной строчке.</p>

<h3>Ostrich</h3>

<p>Когда мы собрались прицепить configgy к одному из очередных наших проектов, то обнаружили (на <a href="https://github.com/robey/configgy">страничке</a> проекта на github), что проект теперь deprecated (хотя и будет пока поддерживаться в каком-то виде) и вместо него предлагается использовать Scala-библиотеки от twitter. Для логгинга - util-logging из набора <a href="https://github.com/twitter/util">Util</a>, который помимо лог-файлов поддерживает <a href="https://github.com/facebook/scribe">Scribe</a> и Syslog, для конфигурирования - <a href="https://github.com/twitter/ostrich">ostrich</a>.</p>

<p>Ostrich - это довольно развесистая библиотека, предназначенная для</p>

<ul>
<li>конфигурирования</li>
<li>сбора статистики</li>
<li>запуска/остановки приложения и его сервисов</li>
<li>предоставления админского интерфейса через HTTP или просто сокет</li>
</ul>


<p>Главная особенность конфиг-файлов ostrich - они являются обычными Scala-классами, со всемы вытекающими: они типизированы и могут наследоваться от абстрактного класса или трейта. В тех местах, где конфигурация используется, отпадает необходимость извлечения значений из конфига, проверки на то что они присутствуют, предоставления дефолтных значений и приведения к нужному типу. Обратной стороной медали можно было бы назвать необходимость компиляции конфига в рантайме, но поскольку делать это нужно не так уж часто (обычно при старте приложения), то ради красивых type-safe конфигов можно и потерпеть.</p>

<p>Также, ostrich предоставляет готовую заготовку ServerConfig, включающую в себя настройку логгинга и поднятие http/socket интерфейса при загрузке.</p>

<p>Несмотря на фичастость, мне кажется что автор configgy совершенно зря остановил развитие библиотеки: она очень проста в использовании и идеально подходит для большого диапазона проектов. Ostrich же относится к совершенно другой категории и для многих задач его навороченность выглядит излишней. Кроме того, в его использовании есть несколько подводных камней, о которых я постараюсь рассказать поподробнее в следующий раз.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Очередная классификация программистов]]></title>
    <link href="http://digal.github.com/blog/2011/08/20/types-of-programmers/"/>
    <updated>2011-08-20T11:31:00+04:00</updated>
    <id>http://digal.github.com/blog/2011/08/20/types-of-programmers</id>
    <content type="html"><![CDATA[<p>Утром наткнулся в zite на замечательную статью: &#8221;<a href="http://techiferous.com/2011/08/are-you-a-good-programmer/">Are You a Good Programmer?</a>&#8221;, в которой приведена интересная классификация <em>хороших</em> программистов. Несмотря на всю относительность таких классификаций, очень занимательно примерять это всё на себя.</p>

<p>Мне трудно судить, являюсь ли я на данный момент действительно хорошим программистом (и каким критериям, собственно, надо для этого соответствовать?), но определённо могу сказать что последний год развиваюсь в сторону первого типа (Philosopher). Этому явно способствует и спользование такого языка как scala, склоняющая к очень &#8220;безопасному&#8221; стилю программирования, и позволяющая хорошо управлять ограничениями в коде с помощью системы типов, при этом сохраняя красоту и лаконичность кода.</p>

<p>Было бы интересно узнать, к какому типу вы себя относите? Понятно что типы могут сочетаться в разных пропорциях, и вполне возможно, что можно придумать ещё несколько.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ура! Новый хоумпейж!]]></title>
    <link href="http://digal.github.com/blog/2011/08/15/"/>
    <updated>2011-08-15T11:19:00+04:00</updated>
    <id>http://digal.github.com/blog/2011/08/</id>
    <content type="html"><![CDATA[<p>Уф, я, кажется, таки настроил <a href="http://octopress.org/" title="Octopress: A blogging framework for hackers.">octopress</a> и, наверное, таки останусь здесь.
Несмотря на излишнюю красноглазость (девиз октопресса говорит сам за себя), эта платформа ближе всего к идеалу блогдвижка, как я его представляю.
Как дойдут руки, я попробую доконфигурить это до юзабельного состояния (&#8220;ха-ха!&#8221; - как бы говорит линуксоедный опыт) и начать уже писать посты,
благо, исчезает последняя отмазка этого не делать - отсутствие нормального блога.</p>

<!--more-->


<p>До этого я пробовал ЖЖ, blogspot, tumblr, posterous и бложеки на корпоративном сайте. Прижился только <a href="http://twitter.com/digal">твитор</a>,
но его 140 символов не всегда хватает, чтобы выпендриться умом.</p>

<p>Я пока не уверен в идеальном процентном соотношении красноглазия/лытдыбра (в смысле постов на профессиональные/личные темы), так что буду писать
как получится, а дальше отрегулирую по фидбекам.</p>

<p>Алсо, если кто-то будет тоже настраивать octopress, то не наступайте на граблю, на которую я убил, наверное, час нервных рефрешей этой страницы:
если делать всё по официальному гайду, то скорее всего дефолтным бранчем в гитхаб-репозитории у вас окажется &#8220;source&#8221;, а не &#8220;master&#8221;, который,
собственно, и нужно публиковать. Переключить это можно в настройках репозитория.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello?]]></title>
    <link href="http://digal.github.com/blog/2011/08/15/hello/"/>
    <updated>2011-08-15T11:15:00+04:00</updated>
    <id>http://digal.github.com/blog/2011/08/15/hello</id>
    <content type="html"><![CDATA[<p>Привет? Рас-рас!</p>
]]></content>
  </entry>
  
</feed>
